{"title":"使用 GORM（Go 的 ORM 库）连接数据库，并实现增删改查操作","uid":"08ed117ef6641c202bf4a939efc3aec0","slug":"库）连接数据库，并实现增删改查操作","date":"2023-08-15T18:25:35.000Z","updated":"2023-08-15T18:46:19.243Z","comments":true,"path":"api/articles/库）连接数据库，并实现增删改查操作.json","keywords":null,"cover":null,"content":"<h1 id=\"使用-GORM（Go-的-ORM-库）连接数据库，并实现增删改查操作\"><a href=\"#使用-GORM（Go-的-ORM-库）连接数据库，并实现增删改查操作\" class=\"headerlink\" title=\"使用 GORM（Go 的 ORM 库）连接数据库，并实现增删改查操作\"></a>使用 GORM（Go 的 ORM 库）连接数据库，并实现增删改查操作</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本篇文章为面向用户层面的掌握 Go 语言基础以及了解 MySQL数据库，读完本篇文章，读者可以了解ORM框架的定义和熟悉使用GORM包进行基本的CRUD。</p>\n<h2 id=\"GORM\"><a href=\"#GORM\" class=\"headerlink\" title=\"GORM\"></a>GORM</h2><p>GORM是Go语言的一个ORM(Object Relational Mapping)库。它可以让我们通过Go来操作数据库中的数据。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ORM即对象关系映射，将数据库中的表转为程序中的实体对象（通过建立对象和关系数据之间的映射模型，可以将一个表对应一个实体类；将一条记录对应一个对象。）通过使用面向对象方式来操作数据库，可以简化开发，减少重复劳动。</p></blockquote>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li><strong>数据操作功能：</strong><ul>\n<li>提供全功能的ORM（对象关系映射）功能，简化了数据库操作。</li>\n<li>支持多种关联关系，如Has One，Has Many，Belongs To，Many To Many，多态，单表继承。</li>\n<li>在Create、Save、Update和Delete等操作中，允许使用钩子方法来定制业务逻辑。</li>\n</ul>\n</li>\n<li><strong>高级查询与预加载：</strong><ul>\n<li>支持<code>Preload</code>和<code>Joins</code>的预加载，提高查询性能和效率。</li>\n</ul>\n</li>\n<li><strong>事务处理：</strong><ul>\n<li>提供事务管理功能，包括嵌套事务、Save Point和Rollback To Saved Point等。</li>\n<li>能够使用Context来管理事务，同时支持预编译模式和DryRun模式。</li>\n</ul>\n</li>\n<li><strong>灵活的数据操作：</strong><ul>\n<li>支持批量插入、FindInBatches、使用SQL表达式和Context Valuer进行CRUD操作。</li>\n</ul>\n</li>\n<li><strong>高级SQL功能：</strong><ul>\n<li>提供SQL构建器，支持Upsert操作、数据库锁、Optimizer/Index/Comment Hint等功能。</li>\n<li>支持命名参数和子查询，增强了查询灵活性。</li>\n</ul>\n</li>\n<li><strong>数据结构与迁移：</strong><ul>\n<li>支持复合主键、索引和约束。</li>\n<li>自动迁移功能能够简化数据库结构更新过程。</li>\n</ul>\n</li>\n<li><strong>定制化和扩展性：</strong><ul>\n<li>允许自定义Logger，适应不同的日志需求。</li>\n<li>提供灵活的插件API，如Database Resolver和Prometheus等，实现了多数据库、读写分离等功能。</li>\n</ul>\n</li>\n<li><strong>可靠性和开发友好：</strong><ul>\n<li>每个特性都经过充分测试，保证了框架的稳定性和质量。</li>\n<li>设计开发者友好，提供了简洁而强大的API接口，降低了使用难度。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"CRUD\"><a href=\"#CRUD\" class=\"headerlink\" title=\"CRUD\"></a>CRUD</h2><h3 id=\"Create\"><a href=\"#Create\" class=\"headerlink\" title=\"Create\"></a>Create</h3><h4 id=\"新增一条记录\"><a href=\"#新增一条记录\" class=\"headerlink\" title=\"新增一条记录\"></a>新增一条记录</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">user :&#x3D; User&#123;Name: &quot;Jessica&quot;, Age: 24&#125; &#x2F;&#x2F; 创建一个user实体\ndb.Create(&amp;user) &#x2F;&#x2F; 创建一条记录\nprintln(user.ID) &#x2F;&#x2F; 记录新增后，会返回插入数据的主键并设置到user实体上\nprintln(result.Error)       &#x2F;&#x2F; 返回 error\nprintln(result.RowsAffected) &#x2F;&#x2F; 返回插入记录的条数</code></pre>\n\n<h4 id=\"批量插入\"><a href=\"#批量插入\" class=\"headerlink\" title=\"批量插入\"></a>批量插入</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">var users &#x3D; []User&#123;&#123;Name: &quot;Alex&quot;, Age: 25&#125;, &#123;Name: &quot;Bob&quot;, Age: 20&#125;, &#123;Name: &quot;Candy&quot;, Age: 25&#125;&#125;\n\tdb.Create(&amp;users)\n\n\tfor _, item :&#x3D; range users &#123;\n\t\tprintln(item.ID)\n\t&#125;</code></pre>\n\n<h4 id=\"选定字段创建\"><a href=\"#选定字段创建\" class=\"headerlink\" title=\"选定字段创建\"></a>选定字段创建</h4><p>用选定字段创建</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">user :&#x3D; User&#123;Name: &quot;aaa&quot;, Age:  20&#125;\ndb.Select(&quot;Name&quot;, &quot;Age&quot;).Create(&amp;user)\n&#x2F;&#x2F;  INSERT INTO &#96;users&#96; (&#96;created_at&#96;,&#96;updated_at&#96;,&#96;name&#96;,&#96;age&#96;) VALUES (&#39;2023-08-12 20:09:37.705&#39;,&#39;2023-08-12 20:09:37.705&#39;,&#39;samuelZhang1&#39;,20)</code></pre>\n\n<p>排除选定字段</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">user :&#x3D; User&#123;Name: &quot;aaa&quot;, Age: 20&#125;\ndb.Omit(&quot;Age&quot;).Create(&amp;user)\n&#x2F;&#x2F; INSERT INTO &#96;users&#96; (&#96;created_at&#96;,&#96;updated_at&#96;,&#96;deleted_at&#96;,&#96;name&#96;) VALUES (&#39;2023-08-12 20:10:50.244&#39;,&#39;2023-08-12 20:10:50.244&#39;,NULL,&#39;samuelZhang2&#39;)</code></pre>\n\n<h3 id=\"Read\"><a href=\"#Read\" class=\"headerlink\" title=\"Read\"></a>Read</h3><h4 id=\"主键检索\"><a href=\"#主键检索\" class=\"headerlink\" title=\"主键检索\"></a>主键检索</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 根据主键获取第一条记录（主键升序）\nuser:&#x3D;User&#123;&#125;\ndb.First(&amp;user，1)\n&#x2F;&#x2F; SELECT * FROM users ORDER BY id LIMIT 1;\n\n\n&#x2F;&#x2F; 根据主键获取最后一条记录（主键降序）\nuser:&#x3D;User&#123;&#125;\ndb.Last(&amp;user)\n&#x2F;&#x2F; SELECT * FROM users ORDER BY id DESC LIMIT 1;\n\nuser:&#x3D;User&#123;&#125;\nresult :&#x3D; db.First(&amp;user)\nprintln(result.RowsAffected) &#x2F;&#x2F; 返回找到的记录数\nprintln(result.Error)        &#x2F;&#x2F; returns error\n\n&#x2F;&#x2F; 检查 ErrRecordNotFound 错误\nerrors.Is(result.Error, gorm.ErrRecordNotFound)</code></pre>\n\n<h4 id=\"条件检索\"><a href=\"#条件检索\" class=\"headerlink\" title=\"条件检索\"></a>条件检索</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 获取第一条匹配的记录\ndb.Where(&quot;name &#x3D; ?&quot;, &quot;Alex&quot;).First(&amp;user)\n&#x2F;&#x2F; SELECT * FROM users WHERE name &#x3D; &#39;Alex&#39; ORDER BY id LIMIT 1;\n\n\n&#x2F;&#x2F; IN\ndb.Where(&quot;name IN ?&quot;, []string&#123;&quot;Alex&quot;, &quot;Samuel&quot;&#125;).Find(&amp;users)\n&#x2F;&#x2F; SELECT * FROM users WHERE name IN (&#39;Alex&#39;,&#39;Samuel&#39;);\n\n&#x2F;&#x2F; LIKE\ndb.Where(&quot;name LIKE ?&quot;, &quot;%lex%&quot;).Find(&amp;users)\n&#x2F;&#x2F; SELECT * FROM users WHERE name LIKE &#39;%lex%&#39;;\n\n&#x2F;&#x2F; AND\ndb.Where(&quot;name &#x3D; ? AND age &gt;&#x3D; ?&quot;, &quot;Alex&quot;, &quot;22&quot;).Find(&amp;users)\n&#x2F;&#x2F; SELECT * FROM users WHERE name &#x3D; &#39;Alex&#39; AND age &gt;&#x3D; 22;\n\n&#x2F;&#x2F; Time\ndb.Where(&quot;updated_at &gt; ?&quot;, lastWeek).Find(&amp;users)\n&#x2F;&#x2F; SELECT * FROM users WHERE updated_at &gt; &#39;2000-01-01 00:00:00&#39;;\n\n&#x2F;&#x2F; BETWEEN\ndb.Where(&quot;created_at BETWEEN ? AND ?&quot;, lastWeek, today).Find(&amp;users)\n&#x2F;&#x2F; SELECT * FROM users WHERE created_at BETWEEN &#39;2000-01-01 00:00:00&#39; AND &#39;2000-01-08 00:00:00&#39;;\n</code></pre>\n\n<h3 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h3><h4 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h4><p>单列</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 条件更新\ndb.Model(&amp;User&#123;&#125;).Where(&quot;id &#x3D; ?&quot;, 1).Update(&quot;name&quot;, &quot;hello&quot;)\n&#x2F;&#x2F; UPDATE &#96;users&#96; SET &#96;name&#96;&#x3D;&#39;hello&#39;,&#96;updated_at&#96;&#x3D;&#39;2023-08-12 19:38:13.34&#39; WHERE id &#x3D; 1 AND &#96;users&#96;.&#96;deleted_at&#96; IS NULL\n\nuser :&#x3D; User&#123;&#125;\nuser.ID&#x3D;1\ndb.Model(&amp;user).Update(&quot;name&quot;, &quot;hello&quot;)\n&#x2F;&#x2F; UPDATE &#96;users&#96; SET &#96;name&#96;&#x3D;&#39;hello&#39;,&#96;updated_at&#96;&#x3D;&#39;2023-08-12 19:38:13.50&#39; WHERE id &#x3D; 1 AND &#96;users&#96;.&#96;deleted_at&#96; IS NULL\n\n&#x2F;&#x2F; 根据条件和 model 的值进行更新\nuser :&#x3D; User&#123;&#125;\nuser.ID&#x3D;1\ndb.Model(&amp;user).Where(&quot;age &gt; ?&quot;,10 ).Update(&quot;name&quot;, &quot;hello&quot;)\n&#x2F;&#x2F;  UPDATE &#96;users&#96; SET &#96;name&#96;&#x3D;&#39;hello&#39;,&#96;updated_at&#96;&#x3D;&#39;2023-08-12 19:41:08.037&#39; WHERE age &gt; 10 AND &#96;users&#96;.&#96;deleted_at&#96; IS NULL AND &#96;id&#96; &#x3D; 1\n</code></pre>\n\n<p>多列</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; 根据 &#96;struct&#96; 更新属性，只会更新非零值的字段\nuser :&#x3D; User&#123;&#125;\nuser.ID &#x3D; 1\ndb.Model(&amp;user).Updates(User&#123;Name: &quot;hello&quot;, Age: 0&#125;) &#x2F;&#x2F; Age将会被忽略\n&#x2F;&#x2F; UPDATE &#96;users&#96; SET &#96;updated_at&#96;&#x3D;&#39;2023-08-12 19:45:15.084&#39;,&#96;name&#96;&#x3D;&#39;hello&#39; WHERE &#96;users&#96;.&#96;deleted_at&#96; IS NULL AND &#96;id&#96; &#x3D; 1\n\n\n&#x2F;&#x2F; 根据 &#96;map&#96; 更新属性\ndb.Model(&amp;user).Updates(map[string]interface&#123;&#125;&#123;&quot;name&quot;: &quot;hello&quot;, &quot;age&quot;: 0&#125;)\nuser :&#x3D; User&#123;&#125;\nuser.ID &#x3D; 1\n&#x2F;&#x2F;  UPDATE &#96;users&#96; SET &#96;age&#96;&#x3D;0,&#96;name&#96;&#x3D;&#39;hello&#39;,&#96;updated_at&#96;&#x3D;&#39;2023-08-12 20:00:13.544&#39; WHERE &#96;users&#96;.&#96;deleted_at&#96; IS NULL AND &#96;id&#96; &#x3D; 1\n</code></pre>\n\n<h3 id=\"Delete\"><a href=\"#Delete\" class=\"headerlink\" title=\"Delete\"></a>Delete</h3><h4 id=\"物理删除\"><a href=\"#物理删除\" class=\"headerlink\" title=\"物理删除\"></a>物理删除</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; User表结构\ntype User struct &#123;\n\tName string\n\tAge  int\n&#125;\n\n&#x2F;&#x2F; 根据整形主键的删除\ndb.Delete(&amp;User&#123;&#125;, 10)\n&#x2F;&#x2F; DELETE from &#96;users&#96; where &#96;users&#96;.&#96;id&#96; &#x3D; 10;\n\n&#x2F;&#x2F; 根据额外条件的删除 (下面的例子将会批量删除)\ndb.Where(&quot;name &#x3D; ?&quot;, &quot;Alex&quot;).Delete(&amp;User&#123;&#125;,[]int&#123;1,2,3&#125;)\n&#x2F;&#x2F; DELETE from &#96;users&#96;WHERE name &#x3D; &#39;Alex&#39; AND &#96;users&#96;.&#96;id&#96; IN (1,2,3);\n</code></pre>\n\n<h4 id=\"软删除\"><a href=\"#软删除\" class=\"headerlink\" title=\"软删除\"></a>软删除</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; User表结构\ntype User struct &#123;\n\tgorm.Model\n\tName string\n\tAge  int\n&#125;\n\n&#x2F;&#x2F; 根据整形主键的删除\ndb.Delete(&amp;User&#123;&#125;, 10)\n&#x2F;&#x2F; UPDATE &#96;users&#96; SET &#96;deleted_at&#96;&#x3D;&#39;2023-08-13 15:04:13.696&#39; WHERE &#96;users&#96;.&#96;id&#96; &#x3D; 10 AND &#96;users&#96;.&#96;deleted_at&#96; IS NULL\n\n&#x2F;&#x2F; 根据额外条件的删除 (下面的例子将会批量删除)\ndb.Where(&quot;name &#x3D; ?&quot;, &quot;Alex&quot;).Delete(&amp;User&#123;&#125;,[]int&#123;1,2,3&#125;)\n&#x2F;&#x2F; UPDATE &#96;users&#96; SET &#96;deleted_at&#96;&#x3D;&#39;2023-08-13 15:07:52.874&#39; WHERE name &#x3D; &#39;Alex&#39; AND &#96;users&#96;.&#96;id&#96; IN (1,2,3) AND &#96;users&#96;.&#96;deleted_at&#96; IS NULL\n</code></pre>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在使用GORM进行数据库操作时，需要按照以下步骤进行，以确保逻辑的清晰性和正确性。</p>\n<ol>\n<li><strong>导入包和驱动</strong>：首先，要导入GORM核心包以及所需的数据库驱动包。</li>\n<li><strong>选择和排除字段</strong>：在使用数据库操作时，可以使用<code>db.Select</code>和<code>db.Omit</code>来选择和排除字段。但要注意，要确保字段是否允许为NULL。</li>\n<li><strong>查询或更新零值</strong>：如果需要查询或更新零值（如0、’’、false），应使用<code>Where</code>和<code>Update</code>方法来构建查询条件。可以使用<code>map[string]interface&#123;&#125;</code>或SQL字符串来定义条件。</li>\n<li><strong>创建数据</strong>：使用<code>db.Create</code>来创建新的数据条目。如果要创建多条数据，可以使用切片。</li>\n<li><strong>查询数据</strong>：使用<code>db.Find</code>进行数据查找。可以通过使用<code>Where</code>和<code>Or</code>条件语句来构建查询条件，同时可以手动添加<code>limit</code>来限制返回的结果数量。</li>\n<li><strong>更新数据</strong>：使用<code>db.Update</code>进行数据更新。可以使用<code>db.Model(User&#123;&#125;).Update</code>来更新单列，或者使用<code>db.Model(User&#123;&#125;).Updates</code>来更新多列。也可以使用SQL表达式作为更新的值。</li>\n<li><strong>删除数据</strong>：使用<code>db.Delete</code>进行数据删除操作。如果Model中不包含<code>gorm.deletedat</code>字段，则会进行物理删除；如果包含该字段，则会进行逻辑删除（软删除）。</li>\n<li><strong>软删除操作</strong>：使用<code>db.Unscoped()</code>可以查找被标记为软删除的记录。如果需要对软删除的记录进行物理删除，可以使用<code>db.Unscoped().Delete</code>。</li>\n</ol>\n<p>总之，通过遵循以上步骤，可以更清晰地进行数据库操作，包括选择字段、查询、更新和删除操作，并能更好地处理软删除操作。同时，要注意处理异常情况，确保操作的稳定性和可靠性。</p>\n","feature":true,"text":"使用 GORM（Go 的 ORM 库）连接数据库，并实现增删改查操作前言本篇文章为面向用户层面的掌握 Go 语言基础以及了解 MySQL数据库，读完本篇文章，读者可以了解ORM框架的定义和熟悉使用GORM包进行基本的CRUD。 GORMGORM是Go语言的一个ORM(Object...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-GORM%EF%BC%88Go-%E7%9A%84-ORM-%E5%BA%93%EF%BC%89%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">使用 GORM（Go 的 ORM 库）连接数据库，并实现增删改查操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GORM\"><span class=\"toc-text\">GORM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">特点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CRUD\"><span class=\"toc-text\">CRUD</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Create\"><span class=\"toc-text\">Create</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%A2%9E%E4%B8%80%E6%9D%A1%E8%AE%B0%E5%BD%95\"><span class=\"toc-text\">新增一条记录</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5\"><span class=\"toc-text\">批量插入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%89%E5%AE%9A%E5%AD%97%E6%AE%B5%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">选定字段创建</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Read\"><span class=\"toc-text\">Read</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E9%94%AE%E6%A3%80%E7%B4%A2\"><span class=\"toc-text\">主键检索</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E6%A3%80%E7%B4%A2\"><span class=\"toc-text\">条件检索</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Update\"><span class=\"toc-text\">Update</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">更新</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Delete\"><span class=\"toc-text\">Delete</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%A9%E7%90%86%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">物理删除</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">软删除</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"Abysmiler","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/03/28/pp6jU9s.jpg","link":"/","description":"落日沉溺于橘色的海，晚风沦陷于赤诚的爱。","socials":{"github":"https://github.com/Abysmiler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"HUAWEI","uid":"c9c1500e9c5f21ac6ce754167f53b620","slug":"HarmonyOS应用开发者基础认证【满分答案】","date":"2023-11-18T07:33:33.000Z","updated":"2023-11-18T07:35:38.961Z","comments":true,"path":"api/articles/HarmonyOS应用开发者基础认证【满分答案】.json","keywords":null,"cover":null,"text":"HarmonyOS应用开发者基础认证一、判断题 在Column和Row容器组件中，justifyContent用于设置子组件在主轴方向上的对齐格式，alignItems用于设置子组件在交叉轴方向上的对齐格式。（正确） 所有使用@Component修饰的自定义组件都支持onPage...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[],"tags":[],"author":{"name":"Abysmiler","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/03/28/pp6jU9s.jpg","link":"/","description":"落日沉溺于橘色的海，晚风沦陷于赤诚的爱。","socials":{"github":"https://github.com/Abysmiler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"高质量编程与性能调优实战","uid":"a565a86cfb39770fa7fc7acb1580eb15","slug":"高质量编程与性能调优实战","date":"2023-08-14T10:24:55.000Z","updated":"2023-08-14T13:34:13.824Z","comments":true,"path":"api/articles/高质量编程与性能调优实战.json","keywords":null,"cover":null,"text":"高质量编程与性能调优实战这是我参与「第三届青训营 -后端场」笔记创作活动的的第3篇笔记 课程主要分为两个部分，分别是高质量编程和性能调优实战。其中高质量编程多是一些指导性原则，辅以一些示例进行讲解，加上课程PPT以及导学链接中已经总结得很清晰完善，所以本篇笔记仅记录一些个人的知识...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"Abysmiler","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/03/28/pp6jU9s.jpg","link":"/","description":"落日沉溺于橘色的海，晚风沦陷于赤诚的爱。","socials":{"github":"https://github.com/Abysmiler","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}