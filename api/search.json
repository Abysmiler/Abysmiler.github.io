[{"id":"c9c1500e9c5f21ac6ce754167f53b620","title":"HUAWEI","content":"HarmonyOS应用开发者基础认证一、判断题\n在Column和Row容器组件中，justifyContent用于设置子组件在主轴方向上的对齐格式，alignItems用于设置子组件在交叉轴方向上的对齐格式。（正确）\n所有使用@Component修饰的自定义组件都支持onPageShow，onBackPress和onPageHide生命周期函数。（错误）\n使用http模块发起网络请求时，必须要使用on(‘headersReceive’）订阅请求头，请求才会成功。（错误）\nVideo组件可以支持本地视频路径和网络路径播放。播放网络视频时，需要申请权限ohos.permission.INTERNET。（正确）\nAbility是系统调度应用的最小单元，是能够完成一个独立功能的组件。一个应用可以包含一个或多个Ability。（正确）\nTabs组件仅可包含子组件TabsContent，每一个页签对应一个内容视图即TabContet组件。（正确）\n@CustomDialog装饰器用于装饰自定义弹窗组件，使得弹窗可以动态设置内容及样式。（正确）\n每调用一次router.pushUrl()方法，默认情况下，页面栈数量会加1，页面栈支持的最大页面数量为32。（正确）\n首选项preferences是以Key-Value形式存储数据，其中Key是可以重复。（错误）\nWeb组件对于所有的网页都可以使用zoom(factor: number)方法进行缩放。（错误）\n每一个自定义组件都有自己的生命周期。（正确）\n\n二、单选题\n下面哪一个事件方法可以获取到List滑动的偏移量（A）\nA. onScroll\nB. onScrollIndex\nC. onReachStart\nD. onReachEnd\n\n发起网络数据请求需要导入以下哪个模块（A）\nA. import http from ‘@ohos.net.http’\nB. import http from ‘@ohos.net.https’\nC. import request from ‘@ohos.request’\nD. import request from ‘@ohos.net.request’\n\nRow组件中有两个Text组件，如果使用justifyContent对齐方式，下面哪个属性可以实现左右两端对齐（D）\nA. FlexAlign.Start\nB. FlexAlign.SpaceEvenly\nC. FlexAlign.End\nD. FlexAlign.SpaceBetween\n\n下面哪个方法，可以跳转到一个新页面，并销毁当前页面（B）\nA. router.pushUrl()\nB. router.replaceUrl()\nC. router.back()\nD. router.clear()\n\n例如现在要实现一个广告弹窗，包含图片和文本等信息，使用下面那种弹窗可以实现（B）\nA. AlertDialog\nB. @CustomDialog\nC. TextPickerDialog\nD. TimePickerDialog\n\n使用Image组件加载网络图片需要如下哪种权限（B）\nA. ohos.permission.READ_MEDIA\nB. ohos.permission.INTERNET\nC. ohos.permission.GET_NETWORK_INFO\nD. ohos.permission.DISTRIBUTED_DATASYNC\n\n在下面哪个文件中可以设置页面的路径配置信息（A）\nA. main_pages.json\nB. module.json5\nC. app.json5\nD. package.json\n\n首选项key的最大长度限制大小为（）字节（C）\nA. 60\nB. 70\nC. 80\nD. 90\n\n关于Button组件，下面哪个样式是胶囊型按钮（A）\nA. ButtonType.Capsule\nB. ButtonType.Normal\nC. ButtonType.Circle\nD. 以上都不是\n\n下列哪种组合方式不能实现子组件从父子组件之间双向数据同步（D）\nA. @State和@Link\nB. @Provide和@Consume\nC. @Observed和@ObjectLink\nD. @State和@Prop\n\n关于Resource是资源引用类型描述错误的是（C）\nA. Resource是资源引用类型，用于设置组件属性的值。\nB. 通过”$r(‘app.type.name’)”的形式引用应用资源，app代表是应用内resources目录中定义的资源，type代表资源类型（或资源的存放位置）。\nC. Resource支持所有的数据类型。\nD. 系统可以根据当前配置加载合适的Resource资源，例如，开发者可以根据屏幕尺寸呈现不同的布局效果，或根据语言设置提供不同的字符串。\n\n首选项preferences值的存储支持哪些数据类型（D）\nA. 数字型\nB. 字符型\nC. 布尔型\nD. 数字型、字符型、布尔型以及这3种类型的数组类型。\n\n下面哪个组件不能包含子组件（D）\nA. Row\nB. Button\nC. Text\nD. LoadingProgress\n\n用哪一种装饰器修饰的组件可作为页面入口组件（B）\nA. @Component\nB. @Entry\nC. @Preview\nD. @Builder\n\n关于Video组件的回调事件，下列说法错误的是（A）\nA. onStart视频播放时触发该事件，可以在这里获取视频时长。\nB. onFinish视频播放结束时触发该事件。\nC. onPrepared视频准备完成时触发该事件。\nD. onUpdate播放进度变化时触发该事件，单位为s，更新时间间隔为250ms。\n\n关于@State状态数据特征，下列描述错误的是（C）\nA. @State装饰的变量是组件内部的状态数据，当这些状态数据被修改时，将会调用所在组件的build方法进行UI刷新。\nB. 标记为@State的属性是私有变量，只能在组件内访问。\nC. @State变量可以不用给定初始值。\nD. 子组件@Link装饰的变量可以和父组件的@State变量建立双向数据绑定。\n\n关于Tabs组件页签的位置设置，下面描述错误的是（D）\nA.当barPosition为Start（默认值），vertical属性为false时（默认值），页签位于容器顶部。\nB.当barPosition为Start（默认值） ，vertical属性为true时，页签位于容器左侧。\nC.当barPosition为End ，vertical属性为false（默认值）时，页签位于容器底部。\nD.当barPosition为End ，vertical属性为true时，页签位于容器底部。\n\n关于UIAbility的启动模式，下列说法错误的是（C）\nA. UIAbility支持单实例、标准模式和指定实例3种启动模式，在module.json中通过launchType配置。\nB. singleton为单实例模式，系统中只存在唯一一个实例，startAbility时，如果已存在，则复用系统中的唯一一个实例。\nC. standard为标准模式，每次startAbility都会启动一个新的实例，系统默认为standard模式。\nD. specified为指定实例模式，运行时由Ability内部业务决定是否创建多实例。\n\n关于Web组件，下面描述错误的是（D）\nA.WebController控制器可以控制Web组件各种行为，比如forward、backward、runJavaScript等。\nB.Web组件支持fileAccess、javaScriptAccess等多种属性的设置，例如 .javaScriptAccess(true)表示允许执行JavaScript脚本。\nC.Web组件支持onConfirm、onConsole等多种事件，例如网页调用confirm()告警时触发onConfirm回调。\nD.使用Web组件访问在线和离线网页都需要添加ohos.permission.INTERNET权限。\n\n关于容器组件Row和Column，下面说法错误的是（D）\nA. Column容器的主轴是垂直方向，交叉轴是水平方向；Row容器的主轴是水平方向，交叉轴是垂直方向。\nB. 主轴和交叉轴始终是相互垂直的，Row和Column主轴的方向不一样。\nC. Column的子组件在主轴方向上的对齐使用justifyContent属性来设置，其参数类型是FlexAlign。\nD. Row的子组件在交叉轴方向上的对齐方式使用alignItems属性来设置，其参数类型为HorizontalAlign。\n\n页面路由需要导入以下哪个模块（B）\nA. import prompt from ‘@ohos.prompt’\nB. import router from ‘@ohos.router’\nC. import Notification from ‘@ohos.notification’\nD. import window from ‘@ohos.window’\n\n\n三、多选题\n下面哪些容器组件是可以滚动的（ABD）\nA. Scroll\nB. List\nC. Row\nD. Grid\nE. Column\n\n下面哪些是Ability的生命周期回调函数（ABEF）\nA. onCreate\nB. onDestroy\nC. onPageShow\nD. onPageHide\nE. onForeground\nF. onBackground\n\nentry下的module.json5中包含以下哪些信息（BCD）\nA. 应用包名和版本号信息\nB. Ability的配置信息\nC. 设备类型信息\nD. 应用权限申请列表\n\n以下关于ArkTS声明式开发范式的基本组成说明正确的是（ABCDEF）\nA. 装饰器：用来装饰类、结构体、方法以及变量，赋予其特殊的含义，例如@Entry表示这是个入口组件。\nB. 自定义组件：可复用的 UI 单元，可组合其它组件。\nC. UI描述：声明式的方法来描述UI的结构，例如build()方法中的代码块。\nD. 内置组件：ArkTS中默认内置的基本组件和布局组件，开发者可以直接调用，如Column、Text、Divider、Button等。\nE. 属性方法：用于组件属性的配置，统一通过属性方法进行设置，如fontSize()、width()、height()、color() 等。\nF. 事件方法：用于添加组件对事件的响应逻辑，统一通过事件方法进行设置，如跟随在Button后面的onClick()。\n\n关于Tabs组件和TabContent组件，下列描述正确的是（ABCD）\nA. TabContent组件不支持设置通用宽度属性，其宽度等于Tabs组件的barWidth属性。\nB. TabContent组件不支持设置通用高度属性，其高度由父组件Tabs高度与TabBar组件高度决定。\nC. TabsController用于控制Tabs组件进行页签切换，不支持一个TabsController控制多个Tabs组件。\nD. TabContent组件的tabBar属性支持使用@Builder构造器生成的组件。\n\n关于ForEach(arr, itemGenerator, index)组件的描述正确的是（BCD）\nA. ForEach中可以循环遍历逻辑代码，例如console.info(‘hello’)\nB. 第一个参数必须是数组，提供循环渲染的数据源。\nC. 第二个参数生成子组件的lambda函数，为数据源中的每个数组项生成子组件。\nD. 第三个参数为匿名函数，用于给定数组项生成唯一且稳定的键值。\n\n针对包含文本元素的组件，例如Text、Button、TextInput等，可以使用下列哪些属性（ABCDE）\nA. fontColor\nB. fontSize\nC. fontStyle\nD. fontWeight\nE. fontFamily\n\n下面哪些组件层次结构是正确的（ABE）\nA. Text&gt;Span\nB. Button&gt;Column&gt;Image\nC. Button&gt;Image&gt;Text\nD. Image&gt;Text&gt;Span\nE. Column&gt;Row&gt;Button\n\n\n","slug":"HarmonyOS应用开发者基础认证【满分答案】","date":"2023-11-18T07:33:33.000Z","categories_index":"","tags_index":"","author_index":"Abysmiler"},{"id":"08ed117ef6641c202bf4a939efc3aec0","title":"使用 GORM（Go 的 ORM 库）连接数据库，并实现增删改查操作","content":"使用 GORM（Go 的 ORM 库）连接数据库，并实现增删改查操作前言本篇文章为面向用户层面的掌握 Go 语言基础以及了解 MySQL数据库，读完本篇文章，读者可以了解ORM框架的定义和熟悉使用GORM包进行基本的CRUD。\nGORMGORM是Go语言的一个ORM(Object Relational Mapping)库。它可以让我们通过Go来操作数据库中的数据。\n\n\n\n\n\n\n\n\n\nORM即对象关系映射，将数据库中的表转为程序中的实体对象（通过建立对象和关系数据之间的映射模型，可以将一个表对应一个实体类；将一条记录对应一个对象。）通过使用面向对象方式来操作数据库，可以简化开发，减少重复劳动。\n特点\n数据操作功能：\n提供全功能的ORM（对象关系映射）功能，简化了数据库操作。\n支持多种关联关系，如Has One，Has Many，Belongs To，Many To Many，多态，单表继承。\n在Create、Save、Update和Delete等操作中，允许使用钩子方法来定制业务逻辑。\n\n\n高级查询与预加载：\n支持Preload和Joins的预加载，提高查询性能和效率。\n\n\n事务处理：\n提供事务管理功能，包括嵌套事务、Save Point和Rollback To Saved Point等。\n能够使用Context来管理事务，同时支持预编译模式和DryRun模式。\n\n\n灵活的数据操作：\n支持批量插入、FindInBatches、使用SQL表达式和Context Valuer进行CRUD操作。\n\n\n高级SQL功能：\n提供SQL构建器，支持Upsert操作、数据库锁、Optimizer/Index/Comment Hint等功能。\n支持命名参数和子查询，增强了查询灵活性。\n\n\n数据结构与迁移：\n支持复合主键、索引和约束。\n自动迁移功能能够简化数据库结构更新过程。\n\n\n定制化和扩展性：\n允许自定义Logger，适应不同的日志需求。\n提供灵活的插件API，如Database Resolver和Prometheus等，实现了多数据库、读写分离等功能。\n\n\n可靠性和开发友好：\n每个特性都经过充分测试，保证了框架的稳定性和质量。\n设计开发者友好，提供了简洁而强大的API接口，降低了使用难度。\n\n\n\nCRUDCreate新增一条记录user :&#x3D; User&#123;Name: &quot;Jessica&quot;, Age: 24&#125; &#x2F;&#x2F; 创建一个user实体\ndb.Create(&amp;user) &#x2F;&#x2F; 创建一条记录\nprintln(user.ID) &#x2F;&#x2F; 记录新增后，会返回插入数据的主键并设置到user实体上\nprintln(result.Error)       &#x2F;&#x2F; 返回 error\nprintln(result.RowsAffected) &#x2F;&#x2F; 返回插入记录的条数\n\n批量插入var users &#x3D; []User&#123;&#123;Name: &quot;Alex&quot;, Age: 25&#125;, &#123;Name: &quot;Bob&quot;, Age: 20&#125;, &#123;Name: &quot;Candy&quot;, Age: 25&#125;&#125;\n\tdb.Create(&amp;users)\n\n\tfor _, item :&#x3D; range users &#123;\n\t\tprintln(item.ID)\n\t&#125;\n\n选定字段创建用选定字段创建\nuser :&#x3D; User&#123;Name: &quot;aaa&quot;, Age:  20&#125;\ndb.Select(&quot;Name&quot;, &quot;Age&quot;).Create(&amp;user)\n&#x2F;&#x2F;  INSERT INTO &#96;users&#96; (&#96;created_at&#96;,&#96;updated_at&#96;,&#96;name&#96;,&#96;age&#96;) VALUES (&#39;2023-08-12 20:09:37.705&#39;,&#39;2023-08-12 20:09:37.705&#39;,&#39;samuelZhang1&#39;,20)\n\n排除选定字段\nuser :&#x3D; User&#123;Name: &quot;aaa&quot;, Age: 20&#125;\ndb.Omit(&quot;Age&quot;).Create(&amp;user)\n&#x2F;&#x2F; INSERT INTO &#96;users&#96; (&#96;created_at&#96;,&#96;updated_at&#96;,&#96;deleted_at&#96;,&#96;name&#96;) VALUES (&#39;2023-08-12 20:10:50.244&#39;,&#39;2023-08-12 20:10:50.244&#39;,NULL,&#39;samuelZhang2&#39;)\n\nRead主键检索&#x2F;&#x2F; 根据主键获取第一条记录（主键升序）\nuser:&#x3D;User&#123;&#125;\ndb.First(&amp;user，1)\n&#x2F;&#x2F; SELECT * FROM users ORDER BY id LIMIT 1;\n\n\n&#x2F;&#x2F; 根据主键获取最后一条记录（主键降序）\nuser:&#x3D;User&#123;&#125;\ndb.Last(&amp;user)\n&#x2F;&#x2F; SELECT * FROM users ORDER BY id DESC LIMIT 1;\n\nuser:&#x3D;User&#123;&#125;\nresult :&#x3D; db.First(&amp;user)\nprintln(result.RowsAffected) &#x2F;&#x2F; 返回找到的记录数\nprintln(result.Error)        &#x2F;&#x2F; returns error\n\n&#x2F;&#x2F; 检查 ErrRecordNotFound 错误\nerrors.Is(result.Error, gorm.ErrRecordNotFound)\n\n条件检索&#x2F;&#x2F; 获取第一条匹配的记录\ndb.Where(&quot;name &#x3D; ?&quot;, &quot;Alex&quot;).First(&amp;user)\n&#x2F;&#x2F; SELECT * FROM users WHERE name &#x3D; &#39;Alex&#39; ORDER BY id LIMIT 1;\n\n\n&#x2F;&#x2F; IN\ndb.Where(&quot;name IN ?&quot;, []string&#123;&quot;Alex&quot;, &quot;Samuel&quot;&#125;).Find(&amp;users)\n&#x2F;&#x2F; SELECT * FROM users WHERE name IN (&#39;Alex&#39;,&#39;Samuel&#39;);\n\n&#x2F;&#x2F; LIKE\ndb.Where(&quot;name LIKE ?&quot;, &quot;%lex%&quot;).Find(&amp;users)\n&#x2F;&#x2F; SELECT * FROM users WHERE name LIKE &#39;%lex%&#39;;\n\n&#x2F;&#x2F; AND\ndb.Where(&quot;name &#x3D; ? AND age &gt;&#x3D; ?&quot;, &quot;Alex&quot;, &quot;22&quot;).Find(&amp;users)\n&#x2F;&#x2F; SELECT * FROM users WHERE name &#x3D; &#39;Alex&#39; AND age &gt;&#x3D; 22;\n\n&#x2F;&#x2F; Time\ndb.Where(&quot;updated_at &gt; ?&quot;, lastWeek).Find(&amp;users)\n&#x2F;&#x2F; SELECT * FROM users WHERE updated_at &gt; &#39;2000-01-01 00:00:00&#39;;\n\n&#x2F;&#x2F; BETWEEN\ndb.Where(&quot;created_at BETWEEN ? AND ?&quot;, lastWeek, today).Find(&amp;users)\n&#x2F;&#x2F; SELECT * FROM users WHERE created_at BETWEEN &#39;2000-01-01 00:00:00&#39; AND &#39;2000-01-08 00:00:00&#39;;\n\n\nUpdate更新单列\n&#x2F;&#x2F; 条件更新\ndb.Model(&amp;User&#123;&#125;).Where(&quot;id &#x3D; ?&quot;, 1).Update(&quot;name&quot;, &quot;hello&quot;)\n&#x2F;&#x2F; UPDATE &#96;users&#96; SET &#96;name&#96;&#x3D;&#39;hello&#39;,&#96;updated_at&#96;&#x3D;&#39;2023-08-12 19:38:13.34&#39; WHERE id &#x3D; 1 AND &#96;users&#96;.&#96;deleted_at&#96; IS NULL\n\nuser :&#x3D; User&#123;&#125;\nuser.ID&#x3D;1\ndb.Model(&amp;user).Update(&quot;name&quot;, &quot;hello&quot;)\n&#x2F;&#x2F; UPDATE &#96;users&#96; SET &#96;name&#96;&#x3D;&#39;hello&#39;,&#96;updated_at&#96;&#x3D;&#39;2023-08-12 19:38:13.50&#39; WHERE id &#x3D; 1 AND &#96;users&#96;.&#96;deleted_at&#96; IS NULL\n\n&#x2F;&#x2F; 根据条件和 model 的值进行更新\nuser :&#x3D; User&#123;&#125;\nuser.ID&#x3D;1\ndb.Model(&amp;user).Where(&quot;age &gt; ?&quot;,10 ).Update(&quot;name&quot;, &quot;hello&quot;)\n&#x2F;&#x2F;  UPDATE &#96;users&#96; SET &#96;name&#96;&#x3D;&#39;hello&#39;,&#96;updated_at&#96;&#x3D;&#39;2023-08-12 19:41:08.037&#39; WHERE age &gt; 10 AND &#96;users&#96;.&#96;deleted_at&#96; IS NULL AND &#96;id&#96; &#x3D; 1\n\n\n多列\n&#x2F;&#x2F; 根据 &#96;struct&#96; 更新属性，只会更新非零值的字段\nuser :&#x3D; User&#123;&#125;\nuser.ID &#x3D; 1\ndb.Model(&amp;user).Updates(User&#123;Name: &quot;hello&quot;, Age: 0&#125;) &#x2F;&#x2F; Age将会被忽略\n&#x2F;&#x2F; UPDATE &#96;users&#96; SET &#96;updated_at&#96;&#x3D;&#39;2023-08-12 19:45:15.084&#39;,&#96;name&#96;&#x3D;&#39;hello&#39; WHERE &#96;users&#96;.&#96;deleted_at&#96; IS NULL AND &#96;id&#96; &#x3D; 1\n\n\n&#x2F;&#x2F; 根据 &#96;map&#96; 更新属性\ndb.Model(&amp;user).Updates(map[string]interface&#123;&#125;&#123;&quot;name&quot;: &quot;hello&quot;, &quot;age&quot;: 0&#125;)\nuser :&#x3D; User&#123;&#125;\nuser.ID &#x3D; 1\n&#x2F;&#x2F;  UPDATE &#96;users&#96; SET &#96;age&#96;&#x3D;0,&#96;name&#96;&#x3D;&#39;hello&#39;,&#96;updated_at&#96;&#x3D;&#39;2023-08-12 20:00:13.544&#39; WHERE &#96;users&#96;.&#96;deleted_at&#96; IS NULL AND &#96;id&#96; &#x3D; 1\n\n\nDelete物理删除&#x2F;&#x2F; User表结构\ntype User struct &#123;\n\tName string\n\tAge  int\n&#125;\n\n&#x2F;&#x2F; 根据整形主键的删除\ndb.Delete(&amp;User&#123;&#125;, 10)\n&#x2F;&#x2F; DELETE from &#96;users&#96; where &#96;users&#96;.&#96;id&#96; &#x3D; 10;\n\n&#x2F;&#x2F; 根据额外条件的删除 (下面的例子将会批量删除)\ndb.Where(&quot;name &#x3D; ?&quot;, &quot;Alex&quot;).Delete(&amp;User&#123;&#125;,[]int&#123;1,2,3&#125;)\n&#x2F;&#x2F; DELETE from &#96;users&#96;WHERE name &#x3D; &#39;Alex&#39; AND &#96;users&#96;.&#96;id&#96; IN (1,2,3);\n\n\n软删除&#x2F;&#x2F; User表结构\ntype User struct &#123;\n\tgorm.Model\n\tName string\n\tAge  int\n&#125;\n\n&#x2F;&#x2F; 根据整形主键的删除\ndb.Delete(&amp;User&#123;&#125;, 10)\n&#x2F;&#x2F; UPDATE &#96;users&#96; SET &#96;deleted_at&#96;&#x3D;&#39;2023-08-13 15:04:13.696&#39; WHERE &#96;users&#96;.&#96;id&#96; &#x3D; 10 AND &#96;users&#96;.&#96;deleted_at&#96; IS NULL\n\n&#x2F;&#x2F; 根据额外条件的删除 (下面的例子将会批量删除)\ndb.Where(&quot;name &#x3D; ?&quot;, &quot;Alex&quot;).Delete(&amp;User&#123;&#125;,[]int&#123;1,2,3&#125;)\n&#x2F;&#x2F; UPDATE &#96;users&#96; SET &#96;deleted_at&#96;&#x3D;&#39;2023-08-13 15:07:52.874&#39; WHERE name &#x3D; &#39;Alex&#39; AND &#96;users&#96;.&#96;id&#96; IN (1,2,3) AND &#96;users&#96;.&#96;deleted_at&#96; IS NULL\n\n\n总结在使用GORM进行数据库操作时，需要按照以下步骤进行，以确保逻辑的清晰性和正确性。\n\n导入包和驱动：首先，要导入GORM核心包以及所需的数据库驱动包。\n选择和排除字段：在使用数据库操作时，可以使用db.Select和db.Omit来选择和排除字段。但要注意，要确保字段是否允许为NULL。\n查询或更新零值：如果需要查询或更新零值（如0、’’、false），应使用Where和Update方法来构建查询条件。可以使用map[string]interface&#123;&#125;或SQL字符串来定义条件。\n创建数据：使用db.Create来创建新的数据条目。如果要创建多条数据，可以使用切片。\n查询数据：使用db.Find进行数据查找。可以通过使用Where和Or条件语句来构建查询条件，同时可以手动添加limit来限制返回的结果数量。\n更新数据：使用db.Update进行数据更新。可以使用db.Model(User&#123;&#125;).Update来更新单列，或者使用db.Model(User&#123;&#125;).Updates来更新多列。也可以使用SQL表达式作为更新的值。\n删除数据：使用db.Delete进行数据删除操作。如果Model中不包含gorm.deletedat字段，则会进行物理删除；如果包含该字段，则会进行逻辑删除（软删除）。\n软删除操作：使用db.Unscoped()可以查找被标记为软删除的记录。如果需要对软删除的记录进行物理删除，可以使用db.Unscoped().Delete。\n\n总之，通过遵循以上步骤，可以更清晰地进行数据库操作，包括选择字段、查询、更新和删除操作，并能更好地处理软删除操作。同时，要注意处理异常情况，确保操作的稳定性和可靠性。\n","slug":"库）连接数据库，并实现增删改查操作","date":"2023-08-15T18:25:35.000Z","categories_index":"","tags_index":"","author_index":"Abysmiler"},{"id":"a565a86cfb39770fa7fc7acb1580eb15","title":"高质量编程与性能调优实战","content":"高质量编程与性能调优实战这是我参与「第三届青训营 -后端场」笔记创作活动的的第3篇笔记\n课程主要分为两个部分，分别是高质量编程和性能调优实战。其中高质量编程多是一些指导性原则，辅以一些示例进行讲解，加上课程PPT以及导学链接中已经总结得很清晰完善，所以本篇笔记仅记录一些个人的知识点记忆以及列出不太熟悉的知识要点。\n高质量编程高质量代码编写的代码能够达到正确可靠、简洁清晰的目标可称之为高质量代码\n\n各种边界条件是否考虑完备\n异常情况处理，稳定性保证\n易读易维护\n\n编程原则\n简单性\n\n消除“多余的复杂性”，以简单清晰的逻辑编写代码\n不理解的代码无法修复改进\n\n\n可读性\n\n代码是给人看的，而不是机器\n编写可维护代码的第一步是确保代码可读\n\n\n生产力\n\n团队整体工作效率非常重要\n\n\n\n编码规范\n代码格式\n\n推荐使用gofmt自动格式化代码\ngofmt：Go语言官方提供的工具，能自动格式化Go语言代码为官方统一风格\ngoimports:Go语言官方提供的工具，实际等于gofmt加上依赖包管理，自动增删依赖的包引用、将依赖包按字母序排序并分类\n\n\n注释的应用\n\n解释代码的功能，描述公共符号的用途。\n描述代码的实现过程，说明公共符号的实际实现方法。\n阐述代码的原因，提供外部因素的背景信息，为代码提供额外上下文。\n指出代码可能出错的情况，限制条件的说明。\n\n\n公共符号的注释\n\n所有公共符号都必须注释，包括在包中声明的变量、常量、函数以及结构等。\n对于不明显或简短的公共功能，同样需要添加注释。\n不论函数在库中的长度或复杂程度如何，都必须进行注释。\n\n\n\n命名规范\n变量\n\n简洁的命名优于冗长的命名。\n缩略词通常使用全大写，但如果缩略词在变量开头且不需要导出，则使用全小写。\n变量与其使用位置的距离越远，需要携带越多的上下文信息。\n\n\n函数\n\n函数名不需要携带包名的上下文信息，因为包名和函数名总是成对出现。\n函数名应该简短明了。\n若某个包内名为 “foo” 的函数返回类型 “Foo”，可以省略类型信息以避免歧义。\n若某个包内名为 “foo” 的函数返回类型 “T”，可以在函数名中加入类型信息。\n\n\n包\n\n包名只能由小写字母组成，不包含大写字母和下划线等字符。\n包名应该简短且包含一定的上下文信息，例如 “schema”、”task” 等。\n避免与标准库重名，例如不要使用 “sync” 或 “strings”。\n避免使用常用变量名作为包名，例如使用 “bufio” 而不是 “buf”。\n使用单数形式而非复数。\n对缩写的使用要谨慎。\n\n\n控制流程\n\n避免过多的嵌套，保持正常流程的清晰性。\n如果两个分支都包含 return 语句，可以去掉多余的 else 分支。\n尽量保持正常代码路径的最小缩进。\n优先处理错误和特殊情况，以减少嵌套。\n尽量保持代码逻辑的线性，避免复杂的嵌套分支。\n正常流程代码应该顺着屏幕向下移动，以提高可读性和可维护性。\n这些原则将有助于提升代码的可维护性和可读性，同时减少故障问题在复杂条件和循环中的出现。\n\n\n错误和异常处理\n\n对于简单错误，如仅出现一次且不需要在其他地方捕获的错误，使用 errors.New 创建匿名变量表示。\n如果需要格式化，可以使用 fmt.Errorf。\n错误的 Wrap 和 Unwrap 机制可以创建错误的跟踪链，通过 %w 关键字关联错误。\n使用 errors.Is 判定特定错误，而非使用 ==，这样可以判定错误链上是否包含特定错误。\n在错误链中获取特定种类的错误，使用 errors.As。\n避免在业务代码中使用 panic，除非是启动阶段的不可逆转错误。\nrecover 只在被 defer 的函数中有效，不支持嵌套，只在当前 Goroutine 生效。\ndefer 语句遵循后进先出的原则。\n如果需要更多上下文信息，可以在 recover 后记录当前调用栈。\n\n\n\n性能优化\n性能基准测试命令：go test -bench=. -benchmem\n\n性能优化建议：\n\n对于切片，应预先分配内存。\n\n在使用make()初始化切片时，尽量提供容量信息。\n\n另一个潜在问题是未释放大内存：\n\n基于已有切片创建新切片不会产生新的底层数组。\n场景：原切片较大，代码在原切片基础上创建小切片。\n原底层数组因仍被引用而无法释放。\n**建议使用copy代替re-slice**。\n\n\n在使用map时，应预先分配内存。\n\n频繁地向map中添加元素会触发map的扩容。\n预先分配空间可以减少内存拷贝和Rehash的开销。\n根据实际需求提前预估所需空间是明智之举。\n\n\n字符串处理：\n\n使用+拼接性能较差，strings.Builder和bytes.Buffer相似，但strings.Builder更快。\n在Go语言中，字符串是不可变类型，占用固定内存。\n使用+时每次重新分配内存。\nstrings.Builder和bytes.Buffer底层均是[]byte数组。\nbytes.Buffer转化为字符串时重新分配了一块内存。\nstrings.Builder直接将底层的[]byte转换为字符串类型。\n内存扩容策略避免了每次拼接都重新分配内存。\n使用strings.Builder进行字符串拼接。\n\n\n利用空结构体节省内存：\n\n使用空结构体struct&#123;&#125;可以节省内存。\n空结构体实例不占用内存空间。\n可用作各种场景下的占位符，节省资源。\n空结构体具备明确的语义，表示这里不需要任何值，只作为占位符。\n在实现Set时，可用map来代替。\n对于该场景，只需使用map的键，无需值。\n即使将map的值设为bool类型，仍会占用1个字节空间。\n\n\n使用atomic包：\n\n锁是通过操作系统实现的，涉及系统调用。\natomic操作是通过硬件实现的，效率高于锁。\nsync.Mutex应用于保护一段逻辑，不仅限于保护单个变量。\n对于非数值操作，可使用atomic.Value，能够容纳interface&#123;&#125;类型。\n\n\n\n\n\n性能调优实战性能调优原则：\n\n数据驱动优化：基于实际数据进行调优，而不是仅仅猜测或臆测。\n定位瓶颈：重点关注最大的瓶颈，不要过多关注细枝末节。\n避免过早优化：在了解问题之前不要进行过度的优化。\n避免过度优化：不要花费过多精力在微小的性能改进上。\n\n性能分析工具pprof：\npprof是一款用于可视化和分析性能数据的工具，它提供了多种功能来帮助定位和解决性能问题。\n\n火焰图：\n\n以垂直的方式表示函数调用顺序。\n每个方块代表一个函数，方块的长度与该函数占用的CPU时间成比例。\n火焰图是交互式的，点击方块可以进一步分析函数的性能。\n\n\n采样过程与原理：\n\nCPU采样：\n\n采样对象：记录函数调用及其占用的时间。\n采样率：每秒采样100次，固定值。\n采样时间：从手动启动到手动结束。\n\n\n堆内存采样：\n\n通过内存分配器追踪堆上的内存分配和释放，记录大小和数量。\n采样率：每分配512kb记录一次，可在运行开始时进行修改，1表示每次分配都记录。\n采样时间：从程序运行开始到采样时。\n采样指标：分配空间、分配对象、已使用空间、已使用对象。\n计算方式：已使用 = 分配 - 释放。\n\n\nGoroutine采样：\n\n记录所有正在运行的用户发起的goroutine的调用栈信息，以及runtime.main的调用栈。\n\n\nThreadCreate采样：\n\n记录程序创建的所有系统线程信息。\n\n\n阻塞采样：\n\n采样阻塞操作的次数和耗时。\n采样率：只记录耗时超过阈值的阻塞操作，1表示每次阻塞都记录。\n\n\n锁采样：\n\n记录争夺锁的次数和耗时。\n采样率：只记录固定比例的锁操作，1表示每次加锁都记录。\n\n\n\n\n\n\n性能调优案例业务服务优化：\n\n一个“服务”是一个能够独立部署的程序，它承载着特定的功能。\n当一个服务的功能实现需要依赖另一个服务的响应结果时，称为一个服务依赖另一个服务。\n“调用链路”是指一组相关的服务，它们一起支持一个接口请求，并且它们之间存在依赖关系。\n“基础库”是指公共的工具包和中间件。\n\n基础库优化：\n\n优化AB实验SDK。\n这包括分析基础库核心逻辑以及性能瓶颈。\n在分析的基础上，设计改进方案。\n根据需要获取数据，避免不必要的数据获取。\n优化数据序列化协议。\n\n\n通过内部的压力测试来验证这些优化。\n在业务服务中推广并验证这些优化。\n\n\n\nGo语言优化：\n\n对编译器和运行时进行优化。\n为了优化内存分配，重新考虑内存分配策略。\n优化代码的编译流程，以生成更高效的程序。\n同样，通过内部压力测试来验证这些优化。\n最终，将这些优化推广到业务服务中，并在实际落地中验证它们的效果。\n\n\nGo语言的优势包括：\n简单的接入方式，只需要调整编译配置。\n高度的通用性，适用于各种应用场景。\n\n\n\n\n\n","slug":"高质量编程与性能调优实战","date":"2023-08-14T10:24:55.000Z","categories_index":"","tags_index":"","author_index":"Abysmiler"},{"id":"3d68dc09ec5fbce46bc235b465b28d7d","title":"GO语言工程实践及课后作业","content":"GO语言工程实践一、猜谜游戏首先，我们要设置一个随机种子，然后利用这个种子来生成随机数。如果我们不使用随机种子，每次生成的随机数都会相同。接下来，我们创建了一个新的读取器（Reader）通过使用 reader :&#x3D; bufio.NewReader(os.Stdin)，并将其与标准输入流 os.Stdin 相关联。这个读取器允许我们以更高级的方式从标准输入中获取数据。\n\n随后，我们使用一个 for 循环，使用 input, err :&#x3D; reader.ReadString(&#39;\\n&#39;) 来读取输入的数据。我们将读取的输入数据与生成的随机数进行比较。如果输入数据较小&#x2F;大，我们会输出相应的提示，并要求重新输入，直到输入的数与生成的随机数相符。这样，我们就完成了一个小型的猜数字游戏。\n\n然而，在这个过程中会出现一个问题。因为输入函数会读取包括最后的换行符在内的输入内容作为字符串，所以我们需要对输入进行处理。首先，我们需要使用 strings.Trim(input, &quot;\\r\\n&quot;) 函数来去除换行符。然后，我们使用 strconv.Atoi(input) 将字符串转换为数字类型。这样才能保证后续比较和逻辑正确进行。\n\npackage main\n\nimport (\n\t&quot;bufio&quot;\n\t&quot;fmt&quot;\n\t&quot;math&#x2F;rand&quot;\n\t&quot;os&quot;\n\t&quot;strconv&quot;\n\t&quot;strings&quot;\n\t&quot;time&quot;\n)\n\nfunc main() &#123;\n\tmaxNum :&#x3D; 100\n\trand.Seed(time.Now().UnixNano())\n\tsecretNumber :&#x3D; rand.Intn(maxNum)\n\t&#x2F;&#x2F; fmt.Println(&quot;The secret number is &quot;, secretNumber)\n\n\tfmt.Println(&quot;Please input your guess&quot;)\n\treader :&#x3D; bufio.NewReader(os.Stdin)\n\tfor &#123;\n\t\tinput, err :&#x3D; reader.ReadString(&#39;\\n&#39;)\n\t\tif err !&#x3D; nil &#123;\n\t\t\tfmt.Println(&quot;An error occured while reading input. Please try again&quot;, err)\n\t\t\tcontinue\n\t\t&#125;\n\t\tinput &#x3D; strings.Trim(input, &quot;\\r\\n&quot;)\n\n\t\tguess, err :&#x3D; strconv.Atoi(input)\n\t\tif err !&#x3D; nil &#123;\n\t\t\tfmt.Println(&quot;Invalid input. Please enter an integer value&quot;)\n\t\t\tcontinue\n\t\t&#125;\n\t\tfmt.Println(&quot;You guess is&quot;, guess)\n\t\tif guess &gt; secretNumber &#123;\n\t\t\tfmt.Println(&quot;Your guess is bigger than the secret number. Please try again&quot;)\n\t\t&#125; else if guess &lt; secretNumber &#123;\n\t\t\tfmt.Println(&quot;Your guess is smaller than the secret number. Please try again&quot;)\n\t\t&#125; else &#123;\n\t\t\tfmt.Println(&quot;Correct, you Legend!&quot;)\n\t\t\tbreak\n\t\t&#125;\n\t&#125;\n&#125;\n\n\n二、命令行词典我们将要实现一个命令行词典，其功能是在用户在命令行输入一个英文单词后，能够返回该单词的中文意思和音标。这个实现的具体过程涉及到通过调用第三方API对单词进行翻译，然后将翻译结果打印出来。\n\n在这个过程中，我们将学习如何使用Go语言来发送HTTP请求，以便与第三方API进行通信。然后，我们会学习如何解析API返回的JSON数据，从中提取出我们所需要的中文意思和音标信息。同时，我们还会探讨一些提高开发效率的技巧，以便在开发过程中能够更加高效地进行操作。\n\n总结而言，通过这个项目，我们将掌握使用Go语言实现命令行工具的方法，学会处理HTTP请求和解析JSON数据的技能，并且在实际开发中提高我们的开发效率。这将为我们未来处理类似任务时打下坚实的基础。\n\n我们所采用的API为彩云科技的在线翻译。\n实现步骤1.抓包在每次翻译这个动作完成的时候，我们可以发现这个过程发送了一个http请求，并且得到的结果存在response里。\n\n\n\n２.代码生成我们将所得到的代码copycURL到网站 curlconverter.com/go# 中，该网站会自动生成由go语言写成的发起http请求的代码。\n\n\n\n3.解析当我们在浏览器中收到来自服务器的响应（response）的JSON数据时，这些数据的结构可能会相当复杂。为了应对这种情况，我们可以使用 oktools.net/json2go/ 这个网站。在这个网站上，我们可以将从彩云翻译页面的响应中获取的JSON数据粘贴到指定区域，然后点击“转换嵌套”按钮，网站会自动生成相应的Go语言结构代码。这个代码会准确地反映JSON数据的结构，而无需进行其他操作。这样，我们就能轻松地将复杂的JSON数据转换为可在Go代码中使用的结构化表示。\n\npackage main  \n  \nimport (  \n&quot;bytes&quot;  \n&quot;encoding&#x2F;json&quot;  \n&quot;fmt&quot;  \n&quot;io&#x2F;ioutil&quot;  \n&quot;log&quot;  \n&quot;net&#x2F;http&quot;  \n&quot;os&quot;  \n)  \n  \ntype DictRequest struct &#123;  \nTransType string &#96;json:&quot;trans_type&quot;&#96;  \nSource string &#96;json:&quot;source&quot;&#96;  \nUserID string &#96;json:&quot;user_id&quot;&#96;  \n&#125;  \n  \ntype DictResponse struct &#123;  \nRc int &#96;json:&quot;rc&quot;&#96;  \nWiki struct &#123;  \nKnownInLaguages int &#96;json:&quot;known_in_laguages&quot;&#96;  \nDescription struct &#123;  \nSource string &#96;json:&quot;source&quot;&#96;  \nTarget interface&#123;&#125; &#96;json:&quot;target&quot;&#96;  \n&#125; &#96;json:&quot;description&quot;&#96;  \nID string &#96;json:&quot;id&quot;&#96;  \nItem struct &#123;  \nSource string &#96;json:&quot;source&quot;&#96;  \nTarget string &#96;json:&quot;target&quot;&#96;  \n&#125; &#96;json:&quot;item&quot;&#96;  \nImageURL string &#96;json:&quot;image_url&quot;&#96;  \nIsSubject string &#96;json:&quot;is_subject&quot;&#96;  \nSitelink string &#96;json:&quot;sitelink&quot;&#96;  \n&#125; &#96;json:&quot;wiki&quot;&#96;  \nDictionary struct &#123;  \nProns struct &#123;  \nEnUs string &#96;json:&quot;en-us&quot;&#96;  \nEn string &#96;json:&quot;en&quot;&#96;  \n&#125; &#96;json:&quot;prons&quot;&#96;  \nExplanations []string &#96;json:&quot;explanations&quot;&#96;  \nSynonym []string &#96;json:&quot;synonym&quot;&#96;  \nAntonym []string &#96;json:&quot;antonym&quot;&#96;  \nWqxExample [][]string &#96;json:&quot;wqx_example&quot;&#96;  \nEntry string &#96;json:&quot;entry&quot;&#96;  \nType string &#96;json:&quot;type&quot;&#96;  \nRelated []interface&#123;&#125; &#96;json:&quot;related&quot;&#96;  \nSource string &#96;json:&quot;source&quot;&#96;  \n&#125; &#96;json:&quot;dictionary&quot;&#96;  \n&#125;  \n  \nfunc query(word string) &#123;  \nclient :&#x3D; &amp;http.Client&#123;&#125;  &#x2F;&#x2F;创建一个http client，这个函数还可以指定最大的返回时间\nrequest :&#x3D; DictRequest&#123;TransType: &quot;en2zh&quot;, Source: word&#125;  \nbuf, err :&#x3D; json.Marshal(request)  &#x2F;&#x2F;设置一个request结构体，将json序列化\nif err !&#x3D; nil &#123;  \nlog.Fatal(err)  \n&#125;  \nvar data &#x3D; bytes.NewReader(buf)  \nreq, err :&#x3D; http.NewRequest(&quot;POST&quot;, &quot;https:&#x2F;&#x2F;api.interpreter.caiyunai.com&#x2F;v1&#x2F;dict&quot;, data) \n&#x2F;&#x2F;生成一个http请求 \nif err !&#x3D; nil &#123;  \nlog.Fatal(err)  \n&#125; \n\n&#x2F;&#x2F;设置请求头\nreq.Header.Set(&quot;Connection&quot;, &quot;keep-alive&quot;)  \nreq.Header.Set(&quot;DNT&quot;, &quot;1&quot;)  \nreq.Header.Set(&quot;os-version&quot;, &quot;&quot;)  \nreq.Header.Set(&quot;sec-ch-ua-mobile&quot;, &quot;?0&quot;)  \nreq.Header.Set(&quot;User-Agent&quot;, &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;99.0.4844.51 Safari&#x2F;537.36&quot;)  \nreq.Header.Set(&quot;app-name&quot;, &quot;xy&quot;)  \nreq.Header.Set(&quot;Content-Type&quot;, &quot;application&#x2F;json;charset&#x3D;UTF-8&quot;)  \nreq.Header.Set(&quot;Accept&quot;, &quot;application&#x2F;json, text&#x2F;plain, *&#x2F;*&quot;)  \nreq.Header.Set(&quot;device-id&quot;, &quot;&quot;)  \nreq.Header.Set(&quot;os-type&quot;, &quot;web&quot;)  \nreq.Header.Set(&quot;X-Authorization&quot;, &quot;token:qgemv4jr1y38jyq6vhvi&quot;)  \nreq.Header.Set(&quot;Origin&quot;, &quot;https:&#x2F;&#x2F;fanyi.caiyunapp.com&quot;)  \nreq.Header.Set(&quot;Sec-Fetch-Site&quot;, &quot;cross-site&quot;)  \nreq.Header.Set(&quot;Sec-Fetch-Mode&quot;, &quot;cors&quot;)  \nreq.Header.Set(&quot;Sec-Fetch-Dest&quot;, &quot;empty&quot;)  \nreq.Header.Set(&quot;Referer&quot;, &quot;https:&#x2F;&#x2F;fanyi.caiyunapp.com&#x2F;&quot;)  \nreq.Header.Set(&quot;Accept-Language&quot;, &quot;zh-CN,zh;q&#x3D;0.9&quot;)  \nreq.Header.Set(&quot;Cookie&quot;, &quot;_ym_uid&#x3D;16456948721020430059; _ym_d&#x3D;1645694872&quot;)  \n\nresp, err :&#x3D; client.Do(req)  &#x2F;&#x2F;真正发起请求\nif err !&#x3D; nil &#123;  \nlog.Fatal(err)  \n&#125;  \ndefer resp.Body.Close()  &#x2F;&#x2F;按照go的习惯，需要手动关闭resp流，defer的意思是在函数结束后关闭，释放内存\nbodyText, err :&#x3D; ioutil.ReadAll(resp.Body)  \nif err !&#x3D; nil &#123;  \nlog.Fatal(err)  \n&#125;  \nif resp.StatusCode !&#x3D; 200 &#123;  &#x2F;&#x2F;得到的response不一定正确，需要检测一下返回的状态码\nlog.Fatal(&quot;bad StatusCode:&quot;, resp.StatusCode, &quot;body&quot;, string(bodyText))  \n&#125;  \nvar dictResponse DictResponse  \nerr &#x3D; json.Unmarshal(bodyText, &amp;dictResponse)  &#x2F;&#x2F;构造一个与json相同的结构体，并将json序列化到这个结构体变量里面\nif err !&#x3D; nil &#123;  \nlog.Fatal(err)  \n&#125;  \nfmt.Println(word, &quot;UK:&quot;, dictResponse.Dictionary.Prons.En, &quot;US:&quot;, dictResponse.Dictionary.Prons.EnUs)  &#x2F;&#x2F;得到音标\nfor _, item :&#x3D; range dictResponse.Dictionary.Explanations &#123;  &#x2F;&#x2F;得到解释\nfmt.Println(item)  \n&#125;  \n&#125;  \n  \nfunc main() &#123;  \nif len(os.Args) !&#x3D; 2 &#123;  \nfmt.Fprintf(os.Stderr, &#96;usage: simpleDict WORD  \nexample: simpleDict hello  \n&#96;)  \nos.Exit(1)  \n&#125;  \nword :&#x3D; os.Args[1]  \nquery(word)  \n&#125;\n\t\n\n三、SOCKS5代理SOCKS5介绍SOCKS5 (Socket Secure 5) 是一种网络协议，主要用于在客户端和服务器之间进行数据传输，特别适用于代理服务器。它是 SOCKS 协议的第五个版本，在此之前的版本的基础上增加了更多的功能和安全性。\n主要特点和用途如下：\n\n代理功能：SOCKS5 协议的核心功能是允许客户端通过代理服务器进行网络连接。客户端将请求发送给代理服务器，代理服务器则代表客户端与目标服务器建立连接，实现客户端的网络访问。\n\n支持 TCP 和 UDP：SOCKS5 协议同时支持 TCP 和 UDP 两种传输协议。这使得客户端可以通过 SOCKS5 代理服务器连接到目标服务器的 TCP 或 UDP 端口，这在某些应用中如远程访问、P2P 等方面非常有用。\n\n身份验证：SOCKS5 支持用户名和密码的身份验证机制。在连接代理服务器时，客户端可以提供用户名和密码，以便代理服务器验证用户身份的合法性。\n\nIPv6 支持：SOCKS5 协议不仅支持传统的 IPv4 地址，还支持 IPv6 地址。这使得客户端可以通过代理服务器连接到目标服务器的 IPv6 地址。\n\n防火墙穿越：SOCKS5 协议可以帮助用户绕过防火墙的限制，从而实现跨境访问被封锁的网站或服务。\n\n匿名性：通过使用 SOCKS5，目标服务器只能看到 SOCKS5 代理服务器的 IP 地址，而无法直接获取到客户端的真实 IP 地址，从而提供一定程度的匿名性。\n\n\n需要注意的是，SOCKS5 是一种基于应用层的协议，与基于传输层的代理协议如 HTTP/HTTPS 不同。它能够与各种应用程序一起使用，无需对这些应用程序进行额外的配置。由于 SOCKS5 协议具备强大的代理功能和灵活性，它在许多场景下得到广泛应用，包括网络隐私保护、翻墙、加速等各种应用。\nSOCKS5工作原理SOCKS5（Socket Secure 5）协议是一种用于数据传输和身份验证的协议，其工作原理涉及客户端、代理服务器和目标服务器之间的交互。下面是 SOCKS5 协议的详细工作流程：\n\n客户端发送连接请求：当客户端需要连接目标服务器时，它向 SOCKS5 代理服务器发送连接请求。这个请求包含目标服务器的地址、端口号，以及所需的身份验证方式（如果需要）。\n\n代理服务器进行身份验证（可选）：如果客户端需要身份验证，代理服务器会验证客户端提供的用户名和密码。这一步骤为数据传输提供一定的安全性和授权访问。\n\n代理服务器与目标服务器建立连接：代理服务器在收到客户端的连接请求后，代表客户端与目标服务器建立连接，成为中间人。\n\n数据传输：一旦代理服务器与目标服务器建立连接，它成为客户端与目标服务器之间的桥梁。代理服务器将客户端发送的所有数据转发到目标服务器，同时将目标服务器的响应传回客户端。\n\n连接关闭：当客户端或目标服务器关闭连接时，代理服务器会终止与两者之间的连接，完成数据传输过程。\n\n\nSOCKS5 协议的特点在于它支持 TCP 和 UDP 两种传输协议，并提供身份验证功能。这使得 SOCKS5 协议在代理网络连接方面具备出色的灵活性和功能强大的特点。它能够与各种应用程序协同工作，而无需对这些应用程序进行额外的设置，因为它操作在应用层而非传输层。\n通过这种工作方式，SOCKS5 协议不仅使用户能够绕过防火墙限制，实现跨境访问被封锁的网站或服务，还为用户提供一定程度的网络匿名性。这是因为目标服务器只能看到 SOCKS5 代理服务器的 IP 地址，而无法直接获取客户端的真实 IP 地址。\n\n课后作业修改猜谜游戏里面的最终代码，使用 fmt.Scanf 来简化代码实现package main  \n  \nimport (  \n&quot;fmt&quot;  \n&quot;math&#x2F;rand&quot;  \n&quot;time&quot;  \n)  \n  \nfunc main() &#123;  \nmaxNum :&#x3D; 100  \nrand.Seed(time.Now().UnixNano())  \nsecretNumber :&#x3D; rand.Intn(maxNum)  \n&#x2F;&#x2F; fmt.Println(&quot;The secret number is &quot;, secretNumber)  \n  \nfmt.Println(&quot;Please input your guess&quot;)  \nvar guess int  \nfor &#123;  \nfmt.Scan(&amp;guess)  \nfmt.Println(&quot;You guess is&quot;, guess)  \nif guess &gt; secretNumber &#123;  \nfmt.Println(&quot;Your guess is bigger than the secret number. Please try again&quot;)  \n&#125; else if guess &lt; secretNumber &#123;  \nfmt.Println(&quot;Your guess is smaller than the secret number. Please try again&quot;)  \n&#125; else &#123;  \nfmt.Println(&quot;Correct, you Legend!&quot;)  \nbreak  \n&#125;  \n&#125;  \n&#125;\n\n\n","slug":"GO语言工程实践及课后作业","date":"2023-08-11T09:54:05.000Z","categories_index":"","tags_index":"","author_index":"Abysmiler"},{"id":"e38cf29d68826256ee0466da40a4b793","title":"后端入门--GO语言学习","content":"DAY1 Go 语言基础语法走进Go语言基础语法什么是Go语言1.高性能、高并发\n2.语法简单、学习曲线平缓\n3.丰富的标准库\n4.完善的工具链\n5.静态链接\n6.快速编译\n7.跨平台\n8.垃圾回收\n\n示例：\n\n哪些公司在使用Go语言\n基础语法Hello Worldpackage main\n\nimport(\n\t&quot;fmt&quot;\n)\nfunc main() &#123;\n\tfmt.Println(&quot;Hello World&quot;)\n&#125;\n\n变量package main\n\nimport(\n\t&quot;fmt&quot;\n\t&quot;math&quot;\n)\nfunc main() &#123;\n\n\tvar a &#x3D;&quot;initial&quot;\n\tvar b,c int &#x3D;1,2\n\tvar d &#x3D;true\n\tvar e float64\n\tf:&#x3D;float32(e)\n\tg:&#x3D;a+&quot;foo&quot;\n\n\tfmt.Println(a,b,c,d,e,f)\n\tfmt.Println(g)\n\n\tconst s string &#x3D; &quot;constant&quot;\n\tconst h &#x3D;500000000\n\tconst i &#x3D;3e20&#x2F;h\n\tfmt.Println(s,h,i,math.Sin(h),math.Sin(i))\n&#125;\n\nIf elsepackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\n\tif 7%2 &#x3D;&#x3D; 0 &#123;\n\t\tfmt.Print(&quot;7 is even&quot;)\n\t&#125;else&#123;\n\t\tfmt.Print(&quot;7 is odd&quot;)\n\t&#125;\n\n\tif 8%4 &#x3D;&#x3D; 0 &#123;\n\t\tfmt.Print(&quot;8 is divisible by 4&quot;)\n\t&#125;\n\n\tif num :&#x3D;9; num &lt; 0 &#123;\n\t\tfmt.Print(num,&quot;is negative&quot;)\n\t&#125;else if num &lt; 10 &#123;\n\t\tfmt.Print(num, &quot;has 1 digit&quot;)\n\t&#125;else&#123;\n\t\tfmt.Print(num,&quot;has multiple digits&quot;)\n\t&#125;\n&#125;\n\n循环package main\n\nimport (\n\t&quot;fmt&quot;\n)\n\nfunc main() &#123;\n\n\ti :&#x3D; 1\n\tfor &#123;\n\t\tfmt.Println(&quot;loop&quot;)\n\t\tbreak\n\t&#125;\n\tfor j :&#x3D; 7; j &lt; 9; j++ &#123;\n\t\tfmt.Println(j)\n\t&#125;\n\tfor n :&#x3D; 0; n &lt; 5; n++ &#123;\n\t\tif n%2 &#x3D;&#x3D; 0 &#123;\n\t\t\tcontinue\n\t\t&#125;\n\t\tfmt.Println(n)\n\t&#125;\n\tfor i &lt;&#x3D; 3 &#123;\n\t\tfmt.Println(i)\n\t\ti &#x3D; i + 1\n\t&#125;\n&#125;\n\nSwitchpackage main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;time&quot;\n)\n\nfunc main() &#123;\n\n\ta :&#x3D;2\n\tswitch a &#123;\n\tcase 1:\n\t\tfmt.Println(&quot;one&quot;)\n\tcase 2:\n\t\tfmt.Println(&quot;two&quot;)\n\tcase 3:\n\t\tfmt.Println(&quot;three&quot;)\n\tcase 4,5:\n\t\tfmt.Println(&quot;four or five&quot;)\n\tdefault:\n\t\tfmt.Println(&quot;other&quot;)\n\t&#125;\n\t\n\tt :&#x3D; time.Now()\n\tswitch &#123;\n\tcase t.Hour()&lt;12:\n\t\tfmt.Println(&quot;It&#39;s before noon&quot;)\n\tdefault:\n\t\tfmt.Println(&quot;It&#39;s after noon&quot;)\n\t&#125;\n    \n&#125;\n\n\n数组package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\n\tvar a [5]int\n\ta[4] &#x3D; 100\n\tfmt.Println(a[4], len(a))\n\n\tb :&#x3D; [5]int&#123;1, 2, 3, 4, 5&#125;\n\tfmt.Println(b)\n\n\tvar twoD [2][3]int\n\tfor i :&#x3D; 0; i &lt; 2; i++ &#123;\n\t\tfor j :&#x3D; 0; j &lt; 3; j++ &#123;\n\t\t\ttwoD[i][j] &#x3D; i + j\n\t\t&#125;\n\t&#125;\n\tfmt.Println(&quot;2d: &quot;, twoD)\n&#125;\n\n\n切片package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\n\ts :&#x3D; make([]string, 3)\n\ts[0] &#x3D; &quot;a&quot;\n\ts[1] &#x3D; &quot;b&quot;\n\ts[2] &#x3D; &quot;c&quot;\n\tfmt.Println(&quot;get:&quot;, s[2])   &#x2F;&#x2F; c\n\tfmt.Println(&quot;len:&quot;, len(s)) &#x2F;&#x2F; 3\n\n\ts &#x3D; append(s, &quot;d&quot;)\n\ts &#x3D; append(s, &quot;e&quot;, &quot;f&quot;)\n\tfmt.Println(s) &#x2F;&#x2F; [a b c d e f]\n\n\tc :&#x3D; make([]string, len(s))\n\tcopy(c, s)\n\tfmt.Println(c) &#x2F;&#x2F; [a b c d e f]\n\n\tfmt.Println(s[2:5]) &#x2F;&#x2F; [c d e]\n\tfmt.Println(s[:5])  &#x2F;&#x2F; [a b c d e]\n\tfmt.Println(s[2:])  &#x2F;&#x2F; [c d e f]\n\n\tgood :&#x3D; []string&#123;&quot;g&quot;, &quot;o&quot;, &quot;o&quot;, &quot;d&quot;&#125;\n\tfmt.Println(good) &#x2F;&#x2F; [g o o d]\n&#125;\n\nMappackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\tm :&#x3D; make(map[string]int)\n\tm[&quot;one&quot;] &#x3D; 1\n\tm[&quot;two&quot;] &#x3D; 2\n\tfmt.Println(m)           &#x2F;&#x2F; map[one:1 two:2]\n\tfmt.Println(len(m))      &#x2F;&#x2F; 2\n\tfmt.Println(m[&quot;one&quot;])    &#x2F;&#x2F; 1\n\tfmt.Println(m[&quot;unknow&quot;]) &#x2F;&#x2F; 0\n\n\tr, ok :&#x3D; m[&quot;unknow&quot;]\n\tfmt.Println(r, ok) &#x2F;&#x2F; 0 false\n\n\tdelete(m, &quot;one&quot;)\n\n\tm2 :&#x3D; map[string]int&#123;&quot;one&quot;: 1, &quot;two&quot;: 2&#125;\n\tvar m3 &#x3D; map[string]int&#123;&quot;one&quot;: 1, &quot;two&quot;: 2&#125;\n\tfmt.Println(m2, m3)\n&#125;\n\nRangepackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\tnums :&#x3D; []int&#123;2, 3, 4&#125;\n\tsum :&#x3D; 0\n\tfor i, num :&#x3D; range nums &#123;\n\t\tsum +&#x3D; num\n\t\tif num &#x3D;&#x3D; 2 &#123;\n\t\t\tfmt.Println(&quot;index:&quot;, i, &quot;num:&quot;, num) &#x2F;&#x2F; index: 0 num: 2\n\t\t&#125;\n\t&#125;\n\tfmt.Println(sum) &#x2F;&#x2F; 9\n\n\tm :&#x3D; map[string]string&#123;&quot;a&quot;: &quot;A&quot;, &quot;b&quot;: &quot;B&quot;&#125;\n\tfor k, v :&#x3D; range m &#123;\n\t\tfmt.Println(k, v) &#x2F;&#x2F; b 8; a A\n\t&#125;\n\tfor k :&#x3D; range m &#123;\n\t\tfmt.Println(&quot;key&quot;, k) &#x2F;&#x2F; key a; key b\n\t&#125;\n&#125;\n\n函数package main\n\nimport &quot;fmt&quot;\n\nfunc add(a int, b int) int &#123;\n\treturn a + b\n&#125;\n\nfunc add2(a, b int) int &#123;\n\treturn a + b\n&#125;\n\nfunc exists(m map[string]string, k string) (v string, ok bool) &#123;\n\tv, ok &#x3D; m[k]\n\treturn v, ok\n&#125;\n\nfunc main() &#123;\n\tres :&#x3D; add(1, 2)\n\tfmt.Println(res) &#x2F;&#x2F; 3\n\n\tv, ok :&#x3D; exists(map[string]string&#123;&quot;a&quot;: &quot;A&quot;&#125;, &quot;a&quot;)\n\tfmt.Println(v, ok) &#x2F;&#x2F; A True\n&#125;\n\n指针package main\n\nimport &quot;fmt&quot;\n\nfunc add2(n int) &#123;\n\tn +&#x3D; 2\n&#125;\n\nfunc add2ptr(n *int) &#123;\n\t*n +&#x3D; 2\n&#125;\n\nfunc main() &#123;\n\tn :&#x3D; 5\n\tadd2(n)\n\tfmt.Println(n) &#x2F;&#x2F; 5\n\tadd2ptr(&amp;n)\n\tfmt.Println(n) &#x2F;&#x2F; 7\n&#125;\n\n结构体package main\n\nimport &quot;fmt&quot;\n\ntype user struct &#123;\n\tname     string\n\tpassword string\n&#125;\n\nfunc main() &#123;\n\ta :&#x3D; user&#123;name: &quot;wang&quot;, password: &quot;1024&quot;&#125;\n\tb :&#x3D; user&#123;&quot;wang&quot;, &quot;1024&quot;&#125;\n\tc :&#x3D; user&#123;name: &quot;wang&quot;&#125;\n\tc.password &#x3D; &quot;1024&quot;\n\tvar d user\n\td.name &#x3D; &quot;wang&quot;\n\td.password &#x3D; &quot;1024&quot;\n\n\tfmt.Println(a, b, c, d)           &#x2F;&#x2F; &#123;wang 1024&#125; &#123;wang 1024&#125; &#123;wang 1024&#125; &#123;wang 1024&#125;\n\tfmt.Println(checkPassword(a, &quot;haha&quot;))   &#x2F;&#x2F; false\n\tfmt.Println(checkPassword2(&amp;a, &quot;haha&quot;)) &#x2F;&#x2F; false\n&#125;\n\nfunc checkPassword(u user, password string) bool &#123;\n\treturn u.password &#x3D;&#x3D; password\n&#125;\n\nfunc checkPassword2(u *user, password string) bool &#123;\n\treturn u.password &#x3D;&#x3D; password\n&#125;\n\n结构体方法package main\n\nimport &quot;fmt&quot;\n\ntype user struct &#123;\n\tname     string\n\tpassword string\n&#125;\n\nfunc (u user) checkPassword(password string) bool &#123;\n\treturn u.password &#x3D;&#x3D; password\n&#125;\n\nfunc (u *user) resetPassword(password string) &#123;\n\tu.password &#x3D; password\n&#125;\n\nfunc main() &#123;\n\ta :&#x3D; user&#123;name: &quot;wang&quot;, password: &quot;1024&quot;&#125;\n\ta.resetPassword(&quot;2048&quot;)\n\tfmt.Println(a.checkPassword(&quot;2048&quot;)) &#x2F;&#x2F; true\n&#125;\n\n错误处理package main\n\nimport (\n\t&quot;errors&quot;\n\t&quot;fmt&quot;\n)\n\ntype user struct &#123;\n\tname     string\n\tpassword string\n&#125;\n\nfunc findUser(users []user, name string) (v *user, err error) &#123;\n\tfor _, u :&#x3D; range users &#123;\n\t\tif u.name &#x3D;&#x3D; name &#123;\n\t\t\treturn &amp;u, nil\n\t\t&#125;\n\t&#125;\n\treturn nil, errors.New(&quot;not found&quot;)\n&#125;\n\nfunc main() &#123;\n\tu, err :&#x3D; findUser([]user&#123;&#123;&quot;wang&quot;, &quot;1024&quot;&#125;&#125;, &quot;wang&quot;)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Println(err)\n\t\treturn\n\t&#125;\n\tfmt.Println(u.name) &#x2F;&#x2F; wang\n\n\tif u, err :&#x3D; findUser([]user&#123;&#123;&quot;wang&quot;, &quot;1024&quot;&#125;&#125;, &quot;li&quot;); err !&#x3D; nil &#123;\n\t\tfmt.Println(err) &#x2F;&#x2F; not found\n\t\treturn\n\t&#125; else &#123;\n\t\tfmt.Println(u.name)\n\t&#125;\n&#125;\n\n字符串操作package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;strings&quot;\n)\n\nfunc main() &#123;\n\ta :&#x3D; &quot;hello&quot;\n\tfmt.Println(strings.Contains(a, &quot;ll&quot;))                &#x2F;&#x2F; true\n\tfmt.Println(strings.Count(a, &quot;l&quot;))                    &#x2F;&#x2F; 2\n\tfmt.Println(strings.HasPrefix(a, &quot;he&quot;))               &#x2F;&#x2F; true\n\tfmt.Println(strings.HasSuffix(a, &quot;llo&quot;))              &#x2F;&#x2F; true\n\tfmt.Println(strings.Index(a, &quot;ll&quot;))                   &#x2F;&#x2F; 2\n\tfmt.Println(strings.Join([]string&#123;&quot;he&quot;, &quot;llo&quot;&#125;, &quot;-&quot;)) &#x2F;&#x2F; he-llo\n\tfmt.Println(strings.Repeat(a, 2))                     &#x2F;&#x2F; hellohello\n\tfmt.Println(strings.Replace(a, &quot;e&quot;, &quot;E&quot;, -1))         &#x2F;&#x2F; hEllo\n\tfmt.Println(strings.Split(&quot;a-b-c&quot;, &quot;-&quot;))              &#x2F;&#x2F; [a b c]\n\tfmt.Println(strings.ToLower(a))                       &#x2F;&#x2F; hello\n\tfmt.Println(strings.ToUpper(a))                       &#x2F;&#x2F; HELLO\n\tfmt.Println(len(a))                                   &#x2F;&#x2F; 5\n\tb :&#x3D; &quot;你好&quot;\n\tfmt.Println(len(b)) &#x2F;&#x2F; 6\n&#125;\n\n字符串格式化package main\n\nimport &quot;fmt&quot;\n\ntype point struct &#123;\n\tx, y int\n&#125;\n\nfunc main() &#123;\n\ts :&#x3D; &quot;hello&quot;\n\tn :&#x3D; 123\n\tp :&#x3D; point&#123;1, 2&#125;\n\tfmt.Println(s, n) &#x2F;&#x2F; hello 123\n\tfmt.Println(p)    &#x2F;&#x2F; &#123;1 2&#125;\n\n\tfmt.Printf(&quot;s&#x3D;%v\\n&quot;, s)  &#x2F;&#x2F; s&#x3D;hello\n\tfmt.Printf(&quot;n&#x3D;%v\\n&quot;, n)  &#x2F;&#x2F; n&#x3D;123\n\tfmt.Printf(&quot;p&#x3D;%v\\n&quot;, p)  &#x2F;&#x2F; p&#x3D;&#123;1 2&#125;\n\tfmt.Printf(&quot;p&#x3D;%+v\\n&quot;, p) &#x2F;&#x2F; p&#x3D;&#123;x:1 y:2&#125;\n\tfmt.Printf(&quot;p&#x3D;%#v\\n&quot;, p) &#x2F;&#x2F; p&#x3D;main.point&#123;x:1, y:2&#125;\n\n\tf :&#x3D; 3.141592653\n\tfmt.Println(f)          &#x2F;&#x2F; 3.141592653\n\tfmt.Printf(&quot;%.2f\\n&quot;, f) &#x2F;&#x2F; 3.14\n&#125;\n\nJSON处理package main\n\nimport (\n\t&quot;encoding&#x2F;json&quot;\n\t&quot;fmt&quot;\n)\n\ntype userInfo struct &#123;\n\tName  string\n\tAge   int &#96;json:&quot;age&quot;&#96;\n\tHobby []string\n&#125;\n\nfunc main() &#123;\n\ta :&#x3D; userInfo&#123;Name: &quot;wang&quot;, Age: 18, Hobby: []string&#123;&quot;Golang&quot;, &quot;TypeScript&quot;&#125;&#125;\n\tbuf, err :&#x3D; json.Marshal(a)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\tfmt.Println(buf)         &#x2F;&#x2F; [123 34 78 97...]\n\tfmt.Println(string(buf)) &#x2F;&#x2F; &#123;&quot;Name&quot;:&quot;wang&quot;,&quot;age&quot;:18,&quot;Hobby&quot;:[&quot;Golang&quot;,&quot;TypeScript&quot;]&#125;\n\n\tbuf, err &#x3D; json.MarshalIndent(a, &quot;&quot;, &quot;\\t&quot;)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\tfmt.Println(string(buf))\n\n\tvar b userInfo\n\terr &#x3D; json.Unmarshal(buf, &amp;b)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\tfmt.Printf(&quot;%#v\\n&quot;, b) &#x2F;&#x2F; main.userInfo&#123;Name:&quot;wang&quot;, Age:18, Hobby:[]string&#123;&quot;Golang&quot;, &quot;TypeScript&quot;&#125;&#125;\n&#125;\n\n时间处理package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;time&quot;\n)\n\nfunc main() &#123;\n\tnow :&#x3D; time.Now()\n\tfmt.Println(now) &#x2F;&#x2F; 2022-03-27 18:04:59.433297 +0800 CST m&#x3D;+0.000087933\n\tt :&#x3D; time.Date(2022, 3, 27, 1, 25, 36, 0, time.UTC)\n\tt2 :&#x3D; time.Date(2022, 3, 27, 2, 30, 36, 0, time.UTC)\n\tfmt.Println(t) &#x2F;&#x2F; 2022-03-27 01:25:36 +0000 UTC\n\tfmt.Println(t.Year(), t.Month(), t.Day(), t.Hour(), t.Minute()) &#x2F;&#x2F; 2022 March 27 1 25\n\tfmt.Println(t.Format(&quot;2006-01-02 15:04:05&quot;)) &#x2F;&#x2F; 2022-03-27 01:25:36\n\tdiff :&#x3D; t2.Sub(t)\n\tfmt.Println(diff)   &#x2F;&#x2F; 1h5m0s\n\tfmt.Println(diff.Minutes(), diff.Seconds()) &#x2F;&#x2F; 65 3900\n\tt3, err :&#x3D; time.Parse(&quot;2006-01-02 15:04:05&quot;, &quot;2022-03-27 01:25:36&quot;)\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\tfmt.Println(t3 &#x3D;&#x3D; t)    &#x2F;&#x2F; true\n\tfmt.Println(now.Unix()) &#x2F;&#x2F; 1648738080\n&#125;\n\n数字解析package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;strconv&quot;\n)\n\nfunc main() &#123;\n\tf, _ :&#x3D; strconv.ParseFloat(&quot;1.234&quot;, 64)\n\tfmt.Println(f) &#x2F;&#x2F; 1.234\n\n\tn, _ :&#x3D; strconv.ParseInt(&quot;111&quot;, 10, 64)\n\tfmt.Println(n) &#x2F;&#x2F; 111\n\n\tn, _ &#x3D; strconv.ParseInt(&quot;0x1000&quot;, 0, 64)\n\tfmt.Println(n) &#x2F;&#x2F; 4096\n\n\tn2, _ :&#x3D; strconv.Atoi(&quot;123&quot;)\n\tfmt.Println(n2) &#x2F;&#x2F; 123\n\n\tn2, err :&#x3D; strconv.Atoi(&quot;AAA&quot;)\n\tfmt.Println(n2, err) &#x2F;&#x2F; 0 strconv.Atoi: parsing &quot;AAA&quot;: invalid syntax\n&#125;\n\n进程信息package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;os&quot;\n\t&quot;os&#x2F;exec&quot;\n)\n\nfunc main() &#123;\n\t&#x2F;&#x2F; go run example&#x2F;20-env&#x2F;main.go a b c d\n\tfmt.Println(os.Args)    &#x2F;&#x2F; [&#x2F;var&#x2F;folders&#x2F;8p&#x2F;n34xxfnx38dg8bv_x8l62t_m0000gn&#x2F;T&#x2F;go-build3406981276&#x2F;b001&#x2F;exe&#x2F;main a b c d]\n\tfmt.Println(os.Getenv(&quot;PATH&quot;)) &#x2F;&#x2F; &#x2F;usr&#x2F;local&#x2F;go&#x2F;bin...\n\tfmt.Println(os.Setenv(&quot;AA&quot;, &quot;BB&quot;))\n\n\tbuf, err :&#x3D; exec.Command(&quot;grep&quot;, &quot;127.0.0.1&quot;, &quot;&#x2F;etc&#x2F;hosts&quot;).CombinedOutput()\n\tif err !&#x3D; nil &#123;\n\t\tpanic(err)\n\t&#125;\n\tfmt.Println(string(buf)) &#x2F;&#x2F; 127.0.0.1       localhost\n&#125;\n\n","slug":"后端入门-GO语言学习","date":"2023-07-25T07:15:40.000Z","categories_index":"","tags_index":"","author_index":"Abysmiler"},{"id":"507f0170f324980a8849269cf74aaad4","title":"OriginOs系统修改主题","content":"本文章适用于IQOO NEO5 originOS 8.11.10系统下的主题修改。\n一、i主题降级下载i主题降级工具 提取码：VMxN\n具体降级过程，使用shizuku进行授权，选择相应版本即可降级。\n二、主题包主题包位置/storage/emulated/0/.dwd/c/o/m/b/b/k/t/h/e/m/e/T/\n","slug":"OriginOs系统修改主题","date":"2023-04-14T15:58:02.000Z","categories_index":"","tags_index":"","author_index":"Abysmiler"},{"id":"942ae577a09e5f4577581fd45b3f8b0b","title":"Hexo的基本操作手册","content":"Hexo c   —   hexo g   —   hexo s   —   hexo d \n常用命令新建文章hexo new &lt;文章标题&gt; # 可以简写hexo n &lt;文章标题&gt;\n例：hexo n HELLO WORLD\n\n生成静态文件由于Hexo是用Node.js来进行页面渲染，所以需要生成对应的静态文件\nhexo generate # 可以简写hexo g\n\n启动本地服务器每篇文章总得查看无论是编排、内容，所以我们需要测试，这时候我们就需要本地服务了\nhexo server # 可以简写hexo s\n\n但是运行之前需要确保已经安装 hexo-server 插件\nnpm install hexo-server --save\n\n此时服务器就会开启4000端口供你使用，但是可能你的服务器端口被占用了，会提示以下错误\nFATAL Port 4000 has been used. Try other port instead.\n\n此时你需要切换一个端口\nhexo s -p 5000 # -p 是可以指定端口的操作\n\n部署网站hexo deploy # 可以简写 hexo d\n\n这里涉及到几个知识点\n\n需要先渲染博客，也就是hexo g（可以hexo g -d一步操作）\n还需要配置博客目录下 _config.yml 文件中的deploy模块\n\n# 之后会教大家如何操作\ndeploy:\n    type: git\n    repo: &lt;git地址&gt;\n    branch: master\n\n安装主题戳这里到Hexo的插件库\n博客配置文章front-matter---\ntitle:\ndate:\ntags:\ncategories:\nkeywords:\ndescription:\ntop_img: （除非特定需要，可以不写）\ncomments: 是否展示评论系统（true.展示 false.不展示）\ndescription: 节选，如果不填就默认从文章中选择配置的长度\ncover:  首页缩略图\ntoc:  是否显示toc\ntoc_number: 是否显示toc数字\ncopyright: 是否显示版权\n---\n\n\n\n# 节选内容\nauto_excerpt:\n  enable: true\n  length: 150\n\n系统中英文替换替换主题后你会发现首页的菜单一开始是英文名字，或者不是自己想要的样子，怎么办？配置 _config.yml\nlanguage: zh-CN\n\n新增菜单此时发现点击页面都是空白\n这时候就需要新增页面的操作了，但是注意这里的新增和新增文章不同，这里需要加上分类\n# 新增标签\nhexo new page tags\n\n在博客的根目录访问\nsource&#x2F;tags&#x2F;index.md\n\n发现这是一个文档文件\n是的，基本上大同小异，但是要注意，由于主题的底层已经加上了对该页面的效果，所以需要遵循命名规范后修改文档\ntitle: 标签\ndate: 2019-10-01 10:00:00\ntype: &quot;tags&quot;\n\n此时首页的标签按钮已经展示对应的页面内容了，其余的页面同理。\n友情链接\n前往你的Hexo根目录\n输入 hexo new page link\n找到 source/link/index.md 这个文件\n编辑这个文件\n\ntitle: 链接\ndate: 2019-10-01 10:00:00\ntype: &quot;link&quot;\n\n注意，主题中配置友情链接的位置不是在该文件本身，而是需要你去 创建 source/_data 目录，并且新建文件 link.yml\nclass:\n  class_name: 友情链接\n  link_list:\n    1:\n      name: 名称\n      link: 地址\n      avatar: 头像\n      descr: 描述\n    #2:\n    #  name: xxxxxx\n    #  link: https:&#x2F;&#x2F;www.xxxxxxcn&#x2F;\n    #  avatar: https:&#x2F;&#x2F;xxxxx&#x2F;avatar.png\n    #  descr: xxxxxxx\n\n同时，可以在themes/Butterfly/_config.yml文件中，写上个人博客的信息，方便他人帮忙转载\nFlink:\n  headline: 友情链接\n  info_headline: 我的Blog资料\n  name: Blog 名字： 俗俗俗俗俗人。\n  address: Blog 地址： https:&#x2F;&#x2F;blog.thatwang.com&#x2F;\n  avatar: Blog 头像： https:&#x2F;&#x2F;blog.thatwang.com&#x2F;img&#x2F;avatar.png\n  info: Blog 简介： 做个俗人，知世俗，而不俗\n  comment: 如果需要交换链接，请给我留言，谢谢~\n\n代码高亮Butterfly支持五种高亮样式：\n\ndefault\ndarker\npale night\nlight\nocean\n\n配置 _config.yml\nhighlight_theme: light\n\n复制配置 _config.yml\n# Highlight theme\n# ---------------\nhighlight_theme: light\nhighlight_copy: true    #代码复制按钮\nhighlight_lang: true     #代码语言提示\nhighlight_shrink: false #代码框不展开，需点击 &#39;&gt;&#39; 打开\n\n# copy setting\n# 是否禁止复制（如果禁止，highlight_copy的功能将无效)\n# copyright 复制的内容后面加上版权信息\ncopy:\n  enable: true  # true 开启 &#x2F; false 禁止\n  copyright: true\n\n换行在默认情况下，配置中是不开启换行功能的，如果不希望在代码中有横向滚动条，可以开启这个功能。配置 _config.yml\ncode_word_wrap: true\nhighlight:\n  enable: true\n  line_number: false\n  auto_detect: false\n  tab_replace:\n\n社交图标戳这里到对应的图标中心配置 _config.yml\nsocial:\n  fa fa-weixin: http:&#x2F;&#x2F;iblog.thatwang.com&#x2F;qrcode_for_gh_706ce3f91494_258.jpg\n  fa fa-weibo: http:&#x2F;&#x2F;weibo.cn&#x2F;wordpole9981\n  fa fa-qq: https:&#x2F;&#x2F;jq.qq.com&#x2F;?_wv&#x3D;1027&amp;k&#x3D;5E3IUHu\n\n文章版权配置 _config.yml\npost_copyright:\n  enable: true\n  license: CC BY-NC-SA 4.0\n  license_url: https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;4.0&#x2F;\n\n是否开启版权\ncopyright: false\n\n文章打赏配置 _config.yml\nreward:\n  enable: true\n  QR_code:\n    - itemlist:\n        img: &#x2F;img&#x2F;wechat.jpg\n        text: 微信\n    - itemlist:\n        img: &#x2F;img&#x2F;alipay.jpg\n        text: 支付宝\n\n头像配置 _config.yml\navatar: https:&#x2F;&#x2F;xxxx&#x2F;avatar.png\n\n文章目录配置 _config.yml\ntoc:\n  enable: true\n  number: true  # 显示章节数字\n\n相关文章配置 _config.yml\nrelated_post:\n  enable: true\n  limit: 6         # 显示推荐文章数量\n\n博客年份配置 _config.yml\nsince: 2018\n\n页脚配置 _config.yml\nfooter_custom_text: &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;blog.thatwang.com&#x2F;&quot;&gt;Everybody&#39;s good at something.&lt;&#x2F;a&gt;\n\n夜间模式Apple都有这模式了，我们也不能输呀\n配置 _config.yml\ndarkmode:\n  enable: true\n\n阅读模式阅读模式会去除文章以外的内容\n配置 _config.yml\nreadmode:\n  enable: true\n\n侧边栏设置配置 _config.yml\naside:\n  position: right # left or right\n  card_author: true\n  card_announcement: true\n  card_recent_post: true\n  card_categories: true\n  card_tags: true\n  card_archives: true\n  card_webinfo: true\n\n访问人数配置 _config.yml\nbusuanzi:\n  site_uv: true\n  site_pv: true\n  page_pv: true\n\n运行时间配置 _config.yml\nruntimeshow:\n  enable: true\n  start_date: 6&#x2F;7&#x2F;2018 00:00:00  \n  ##博客开通时间\n  # 格式: 月&#x2F;日&#x2F;年 时间\n  # 也可以写成 年&#x2F;月&#x2F;日 时间\n\n相册文章页面编辑以下markdown格式内容\n&#123;% gallery %&#125;\nmarkdown 图片格式\n&#123;% endgallery %&#125;\n\n评论戳这个leancloud服务\n其实Hexo能支持很多评论系统，但是用下来，就leancloud这个最舒服，最方便\n配置 _config.yml\nvaline:\n  enable: true # if you want use valine,please set this value is true\n  appId: 配置中心查看  # leancloud application app id\n  appKey: key  # leancloud application app key\n  notify: false # valine mail notify (true&#x2F;false) https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wiki\n  verify: false # valine verify code (true&#x2F;false)\n  pageSize: 10 # comment list page size\n  avatar: robohash  # gravatar style https:&#x2F;&#x2F;valine.js.org&#x2F;#&#x2F;avatar\n  lang: zh-cn # i18n: zh-cn&#x2F;en\n  placeholder: 来吧，造作吧，快活吧，肆无忌惮吧！(～￣￣)～ # valine comment input placeholder(like: Please leave your footprints )\n  guest_info: nick,mail,link #valine comment header info\n  bg: &#x2F;img&#x2F;comment_bg.png  # valine background\n\n\n注册登录\n\n创建应用\n\n获取key\n此时就安装好了评论系统，就这么简单\n\n评论\n音乐同样是使用leancloud服务\n前面的注册逻辑与评论一样，接下来就是存储环节\n加入单条音乐播放器的页面\n&#123;% aplayer &quot;可以了&quot; &quot;陈奕迅&quot; &quot;https:&#x2F;&#x2F;xxx.xxx.com&#x2F;92b3af330d2274b1fa55.mp3&quot; &quot;https:&#x2F;&#x2F;xxx.xxx.com&#x2F;xx.png&quot; &quot;autoplay&quot; %&#125;\n\n加入列表音乐播放器的页面\n&#123;% aplayerlist %&#125;&#123;&quot;narrow&quot;: false,&quot;autoplay&quot;: true,&quot;showlrc&quot;: 3,&quot;mode&quot;: &quot;random&quot;,&quot;music&quot;: [&#123;&quot;title&quot;: &quot;美好事物&quot;,&quot;author&quot;: &quot;房东的猫&quot;,&quot;url&quot;: &quot;http:&#x2F;&#x2F;xxx.xxx.com&#x2F;945198c4909674765644.mp3&quot;,&quot;pic&quot;: &quot;http:&#x2F;&#x2F;xxx.xxx.com&#x2F;6e0e9e63cb0733f7ff12.png&quot;,&quot;lrc&quot;: &quot;&quot;&#125;,&#123;&quot;title&quot;: &quot;尚好的青春&quot;,&quot;author&quot;: &quot;云の泣&quot;,&quot;url&quot;: &quot;http:&#x2F;&#x2F;xxx.xxx.com&#x2F;5b42b829b8ae08ccabe0.mp3&quot;,&quot;pic&quot;: &quot;http:&#x2F;&#x2F;xxx.xxx.com&#x2F;889df742eca5261f2fc5.png&quot;,&quot;lrc&quot;: &quot;&quot;&#125;,&#123;&quot;title&quot;: &quot;预谋邂逅&quot;,&quot;author&quot;: &quot;阿肆&quot;,&quot;url&quot;: &quot;http:&#x2F;&#x2F;xxx.xxx.com&#x2F;1bd4f91441982710bcad.mp3&quot;,&quot;pic&quot;: &quot;http:&#x2F;&#x2F;xxx.xxx.com&#x2F;f72d61579f74d4ff9ce0.png&quot;,&quot;lrc&quot;: &quot;&quot;&#125;]&#125;&#123;% endaplayerlist %&#125;\n\n即可\n\n音乐播放器\n分享配置 _config.yml\nsharejs:\n  enable: true\n  sites: wechat,weibo,qq\n\n搜索安装 hexo-generator-search，根据文档做对应配置\n配置 _config.yml\nlocal_search:\n  enable: true\n  labels:\n    input_placeholder: 试试看能找到啥宝藏吧!\n    hits_empty: &quot;客官，本店还未提供该服务: $&#123;query&#125;&quot; # if there are no result\n\n自定义主题配置 _config.yml\ntheme_color:\n   enable: true\n   main: &quot;#696969&quot;\n   paginator: &quot;#00c4b6&quot;\n   button_hover: &quot;#FF7242&quot;\n   text_selection: &quot;#00c4b6&quot;\n   link_color: &quot;#99a9bf&quot;\n   meta_color: &#39;#858585&#39;\n   hr_color: &quot;#A4D8FA&quot;\n   read-mode-bg_color: &#39;#FAF9DE&#39;\n   inline-code-color: &#39;#F47466&#39;\n\n打字效果配置 _config.yml\nactivate_power_mode:\n  enable: true\n\n动态彩带配置 _config.yml\ncanvas_ribbon_piao:\n  enable: true\n  mobile: false # false 手机端不显示 true 手机端显示\n\n背景线条配置 _config.yml\ncanvas_nest:\n  enable: true\n  color: &#39;0,0,255&#39; #color of lines, default: &#39;0,0,0&#39;; RGB values: (R,G,B).(note: use &#39;,&#39; to separate.)\n  opacity: 0.7 # the opacity of line (0~1), default: 0.5.\n  zIndex: -1 # z-index property of the background, default: -1.\n  count: 99 # the number of lines, default: 99.\n  mobile: false #  false 手机端不显示 true 手机端显示\n\n鼠标点击效果配置 _config.yml\nfireworks:\n  enable: true\n  \n# 點擊出現愛心\nclick_heart:\n  enable: true\n\n首页弹幕座右铭配置 _config.yml\n# 主頁subtitle\n# 打字效果\n# (如果有英文逗號&#39; , &#39;，請使用轉義字符 &amp;#44;)\nsubtitle:\n  enable: true\n  sub:\n    - 努力不一定能成功&amp;#44;但是永远不会后悔\n    - Hard work may not always result in success&amp;#44;but it will never result in regret\n\n","slug":"Hexo的基本操作手册","date":"2023-04-01T08:06:18.000Z","categories_index":"","tags_index":"学习笔记","author_index":"Abysmiler"},{"id":"21cb39c0b62accde41e6ec7fe52e9f2d","title":"MarkDown的基本操作","content":"Aurora中文章的Front-Meta属性\n新建文章配置\n\n\n\n配置选项\n默认值\n描述\n\n\n\ntitle\nMarkdown 的文件标题\n文章标题，强烈建议填写此选项\n\n\ndate\n文件创建时的日期时间\n发布时间，强烈建议填写此选项，且最好保证全局唯一\n\n\nauthor\n根 _config.yml 中的 author\n文章作者\n\n\nimg\nfeatureImages 中的某个值\n文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.\n\n\ntop\ntrue\n推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章\n\n\ncover\nfalse\nv1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中\n\n\ncoverImg\n无\nv1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片\n\n\npassword\n无\n文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项\n\n\ntoc\ntrue\n是否开启 TOC（文章目录），可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项\n\n\nmathjax\nfalse\n是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行\n\n\nsummary\n无\n文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\n\n\ncategories\n无\n文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类\n\n\ntags\n无\n文章标签，一篇文章可以多个标签\n\n\n更多markdown语法参考:\n\n\n\n\n\n\n\n\n\nhttps://github.com/Sakiyary/Markdown-Typora-VSCode-Doc\n基本功能快捷键字体操作快捷键\n\n\n功能\n快捷键\n\n\n\n字体加粗\nCtrl+B\n\n\n下划线\nCtrl+U\n\n\n倾斜\nCtrl+I\n\n\n删除线\nAlt+Shift+5\n\n\n插入功能快键键\n\n\n功能\n快键键\n\n\n\n插入图片(本地图片可直接拖入)\nCtrl+Shift+I\n\n\n插入表格\nCtrl+T\n\n\n插入有序列表\nCtrl+Shift+[\n\n\n插入无序列表\nCtrl+Shift+]\n\n\n插入超链接\nCtrl+K\n\n\n插入代码片\nCtrl+Shift+`\n\n\n插入代码块\nCtrl+Shift+K\n\n\n插入公式块\nCtrl+Shift+M\n\n\n插入引用块\nCtrl+Shift+Q\n\n\n标题段落快捷键MarkDown支持六级标题，可以使用Ctrl+数字 指定不同层次的标题和段落\n\n\n\n功能\n快捷键\n\n\n\n段落（正文）\nCtrl+0\n\n\n一级标题\nCtrl+1\n\n\n二级标题\nCtrl+2\n\n\n三–六级标题(以此类推)\nCtrl+3–6\n\n\n提升标题级别\nCtrl+‘+’\n\n\n降低标题级别\nCtrl+‘-’\n\n\n拓展操作快键键表格扩展快捷键在表格中，可以使用鼠标拖动行或者列，达到交换行和列的目的\n同时也可以使用快捷键操作\n\n\n\n功能\n快捷键\n\n\n\n下方插入行\nCtrl+Enter\n\n\n上移该行\nAlt+↑\n\n\n下移该行\nAlt+↓\n\n\n左移该列\nWin键+←\n\n\n右移该列\nWin键+→\n\n\n删除该行\nCtrl+Shift+退格键(BackSpace)\n\n\n左右移动表格列的快捷键与WinDows系统自带的快捷键冲突，导致失效\n删除行快捷键，不知道为什么没有生效\n视图操作快捷键侧边栏\n\n\n功能\n快捷键\n\n\n\n大纲视图\nCtrl+Shift+1\n\n\n文件列表视图\nCtrl+Shift+2\n\n\n文件树视图\n\n\n\n显示/隐藏侧边栏\n\n\n\n放大视图\nCtrl+Shift+‘+’\n\n\n缩小视图\nCtrl+Shift+‘-’\n\n\n恢复原来大小视图\nCtrl+Shift+9\n\n\n编辑模式\n\n\n功能\n快捷键\n\n\n\n源代码模式\nCtrl+/\n\n\n专注模式(当前编辑行为黑，其他行为灰色)\nF8\n\n\n打字机模式(光标始终在屏幕中央位置)\nF9\n\n\n其他\n\n\n功能\n快捷键\n\n\n\n全屏\nF11\n\n\n应用内窗口切换\nCtrl+Tab\n\n\n开发者工具\nShift+F12\n\n\n搜索扩展快捷键\n\n\n功能\n快捷键\n\n\n\n查找/搜索\nCtrl+F(好像是Ctrl+Shift+F，但这个无效)\n\n\n替换\nCtrl+H\n\n\n查找下一个\nF3\n\n\n查找上一个\nShift+F3\n\n\n基本操作快键键选择操作\n\n\n功能\n快捷键\n\n\n\n全选\nCtrl+A\n\n\n选择当前行/句\nCtrl+L\n\n\n选择当前格式文本\nCtrl+E\n\n\n选择当前单词\nCtrl+D\n\n\n删除当前单词\nCtrl+Shift+D\n\n\n跳转操作\n\n\n功能\n快捷键\n\n\n\n跳转到文首\nCtrl+Home\n\n\n跳转到所选内容\nCtrl+J\n\n\n跳转到文末\nCtrl+End\n\n\n粘贴复制操作\n\n\n功能\n快捷键\n\n\n\n复制\nCtrl+C\n\n\n粘贴\nCtrl+V\n\n\n剪切\nCtrl+X\n\n\n复制为MarkDown标记语法\nCtrl+Shift+C\n\n\n粘贴为纯文本\nCtrl+Shift+V\n\n\n文件操作\n\n\n功能\n快捷键\n\n\n\n新建\nCtrl+N\n\n\n新建窗口(在Windows中，这两个作用一样)\nCtrl+Shift+N\n\n\n打开文件\nCtrl+O\n\n\n快速打开(在最近打开中打开)\nCtrl+P\n\n\n保存\nCtrl+S\n\n\n另存为\nCtrl+Shift+S\n\n\n偏好设置\nCtrl+，\n\n\n关闭\nCtrl+W\n\n\n重新打开关闭的文件\nCtrl+Shift+T\n\n\n其他\n\n\n功能\n快捷键\n\n\n\n源代码模式\nCtrl+\\\n\n\n增加缩进\nCtrl+]\n\n\n减少缩进\nCtrl+[\n\n\n快键键修改修改过程\n在Typora菜单栏中，通过\n\n文件–&gt;偏好设置–&gt;打开高级设置\n\n在打开的文件夹中找到conf.user.json文件\n\n在该文件中，通过增加或者修改KeyBeing中的键值对，重新设置快捷键\n例如：\n&quot;keyBinding&quot;: &#123;\n  &#x2F;&#x2F; for example: \n  &#x2F;&#x2F; &quot;Always on Top&quot;: &quot;Ctrl+Shift+P&quot;\n  &quot;Always on Top&quot;: &quot;Ctrl+Shift+P&quot;,  \n  &quot;Code Fences&quot;: &quot;Ctrl+Shift+F&quot;,  \n  &quot;Ordered List&quot;:&quot;Ctrl+Alt+o&quot;,  \n  &quot;Unordered List&quot;: &quot;Ctrl+Alt+u&quot;  \n&#125;,\n重启Typora软件即可生效\n\n\n下面的内容为了方便自己离线学习并且节省做笔记的时间,是直接复制的菜鸟教程,如想看原文可访问以下链接\n\n\n\n\n\n\n\n\n\n菜鸟教程:\nhttps://www.runoob.com/markdown/md-tutorial.html\nMarkdown 介绍\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。\nMarkdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。\nMarkdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。\nMarkdown 编写的文档后缀为 .md, .markdown。\n\nMarkdown 应用Markdown 能被使用来撰写电子书，如：Gitbook。\n当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。\n\n编辑器本教程将使用 VSCode 编辑器来讲解 Markdown 的语法，VSCode 支持 MacOS 、Windows、Linux 平台，且包含多种主题。\nVSCode 默认集成了 Markdown 文档编辑插件，原生就支持高亮 Markdown 的语法。\nVSCode（全称：Visual Studio Code）是一款由微软开发且跨平台的免费源代码编辑器。\n\nVScode 安装教程：https://www.runoob.com/w3cnote/vscode-tutorial.html\nVScode 官网地址：https://code.visualstudio.com/\n\n\nVSCode 实时预览还需要执行 Markdown: Open Preview to the Side 命令来实现。\n在命令窗口输入 Markdown: Open Preview to the Side 命令：\n\n最终效果：\n\n如果你需要将 markdown 转为 PDF、图片、HTML 等格式也可以安装对应的插件来实现。\n你也可以使用我们的在线编辑器来测试：https://c.runoob.com/front-end/712。\n\n测试实例接下来的测试中，我们先在 VSCode 下安装 Markdown Preview Enhanced 插件来实现更强大的功能。\n点击右侧栏扩展按钮，查找Markdown Preview Enhanced 插件，点击安装：\n\n安装完成后重启 VSCode。\n在 RUNOOB.md 输入以下代码：\n# RUNOOB Markdown Test\n## Hello World!\n\n将该代码格式粘贴到文件 RUNOOB.md 上，效果如下：\n\n在预览框中右击鼠标还提供了各种导出功能：\n\nMarkdown 标题Markdown 标题有两种格式。\n使用 = 和 - 标记一级和二级标题= 和 - 标记语法格式如下：\n我展示的是一级标题\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n\n我展示的是二级标题\n-----------------\n\n显示效果如下图：\n\n使用 # 号标记使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n显示效果如下图：\n\nMarkdown 段落Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。\n\n当然也可以在段落后面使用一个空行来表示重新开始一个段落。\n\n\n字体Markdown 可以使用以下几种字体：\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n\n显示效果如下所示：\n\n\n分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n***\n\n* * *\n\n*****\n\n- - -\n\n----------\n\n显示效果如下所示：\n\n\n删除线如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：\nRUNOOB.COM\nGOOGLE.COM\n~~BAIDU.COM~~\n\n显示效果如下所示：\n下划线\n下划线可以通过 HTML 的 标签来实现：\n&lt;u&gt;带下划线文本&lt;&#x2F;u&gt;\n\n显示效果如下所示：\n\n\n脚注脚注是对文本的补充说明。\nMarkdown 脚注的格式如下:\n[^要注明的文本]\n\n以下实例演示了脚注的用法：\n创建脚注格式类似这样 [^RUNOOB]。\n\n[^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！\n\n演示效果如下：\n\nMarkdown 列表Markdown 支持有序列表和无序列表。\n无序列表使用星号(****)、加号(+)或是减号(*-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n\n- 第一项\n- 第二项\n- 第三项\n\n显示结果如下：\n\n有序列表使用数字并加上 . 号来表示，如：\n1. 第一项\n2. 第二项\n3. 第三项\n\n显示结果如下：\n\n列表嵌套列表嵌套只需在子列表中的选项前面添加两个或四个空格即可：\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n\n显示结果如下：\n\nMarkdown 区块Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：\n&gt; 区块引用\n&gt; 菜鸟教程\n&gt; 学的不仅是技术更是梦想\n\n显示结果如下：\n\n另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推：\n&gt; 最外层\n&gt; &gt; 第一层嵌套\n&gt; &gt; &gt; 第二层嵌套\n\n显示结果如下：\n\n区块中使用列表区块中使用列表实例如下：\n&gt; 区块中使用列表\n&gt; 1. 第一项\n&gt; 2. 第二项\n&gt; + 第一项\n&gt; + 第二项\n&gt; + 第三项\n\n显示结果如下：\n\n列表中使用区块如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。\n列表中使用区块实例如下：\n* 第一项\n    &gt; 菜鸟教程\n    &gt; 学的不仅是技术更是梦想\n* 第二项\n\n显示结果如下：\n\nMarkdown 代码如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**`**），例如：\n&#96;printf()&#96; 函数\n\n显示结果如下：\n\n代码区块代码区块使用 4 个空格或者一个制表符（Tab 键）。\n实例如下：\n\n显示结果如下：\n\n你也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）：\n&#96;&#96;&#96;javascript\n$(document).ready(function () &#123;\n    alert(&#39;RUNOOB&#39;);\n&#125;);\n&#96;&#96;&#96;\n\n显示结果如下：\n\nMarkdown 链接链接使用方法如下：\n[链接名称](链接地址)\n\n或者\n\n&lt;链接地址&gt;\n\n例如：\n这是一个链接 [菜鸟教程](https:&#x2F;&#x2F;www.runoob.com)\n\n显示结果如下：\n\n直接使用链接地址：\n&lt;https:&#x2F;&#x2F;www.runoob.com&gt;\n\n显示结果如下：\n\n高级链接我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 runoob 作为网址变量 [Runoob][runoob]\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http:&#x2F;&#x2F;www.google.com&#x2F;\n  [runoob]: http:&#x2F;&#x2F;www.runoob.com&#x2F;\n\n显示结果如下：\n\nMarkdown 图片Markdown 图片语法格式如下：\n![alt 属性文本](图片地址)\n\n![alt 属性文本](图片地址 &quot;可选标题&quot;)\n\n\n开头一个感叹号 !\n接着一个方括号，里面放上图片的替代文字\n接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。\n\n使用实例：\n![RUNOOB 图标](http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png)\n\n![RUNOOB 图标](http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png &quot;RUNOOB&quot;)\n\n显示结果如下：\n\n当然，你也可以像网址那样对图片网址使用变量:\n这个链接用 1 作为网址变量 [RUNOOB][1].\n然后在文档的结尾为变量赋值（网址）\n\n[1]: http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png\n\n显示结果如下：\n\nMarkdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的标签。\n&lt;img decoding&#x3D;&quot;async&quot; src&#x3D;&quot;http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png&quot; width&#x3D;&quot;50%&quot;&gt;\n\n显示结果如下：\n\nMarkdown 表格Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。\n语法格式如下：\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n\n以上代码显示结果如下：\n\n对齐方式\n我们可以设置表格的对齐方式：\n\n-: 设置内容和标题栏居右对齐。\n:- 设置内容和标题栏居左对齐。\n:-: 设置内容和标题栏居中对齐。\n\n实例如下：\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n\n以上代码显示结果如下：\n\nMarkdown 高级技巧支持的 HTML 元素不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等 ，如：\n使用 &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Alt&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Del&lt;&#x2F;kbd&gt; 重启电脑\n\n输出结果为：\n\n转义Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：\n**文本加粗** \n\\*\\* 正常显示星号 \\*\\*\n\n输出结果为：\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\\   反斜线\n&#96;   反引号\n*   星号\n_   下划线\n&#123;&#125;  花括号\n[]  方括号\n()  小括号\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   感叹号\n\n公式Markdown Preview Enhanced 使用 KaTeX 或者 MathJax 来渲染数学表达式。\nKaTeX 拥有比 MathJax 更快的性能，但是它却少了很多 MathJax 拥有的特性。你可以查看 KaTeX supported functions/symbols 来了解 KaTeX 支持那些符号和函数。\n默认下的分隔符：\n\n$...$ 或者 \\(...\\) 中的数学表达式将会在行内显示。\n$$...$$ 或者 \\[...\\] 或者 ````math` 中的数学表达式将会在块内显示。\n\n\n$$\n\\begin&#123;Bmatrix&#125;\n   a &amp; b \\\\\n   c &amp; d\n\\end&#123;Bmatrix&#125;\n$$\n$$\n\\begin&#123;CD&#125;\n   A @&gt;a&gt;&gt; B \\\\\n@VbVV @AAcA \\\\\n   C @&#x3D; D\n\\end&#123;CD&#125;\n$$\n\n输出结果为：\n\ntypora 画流程图、时序图(顺序图)、甘特图复制以下代码使用 typora 的源码模式粘贴到编辑器中查看效果：\n\n以下几个实例效果图如下：\n1、横向流程图源码格式：\n&#96;&#96;&#96;mermaid\ngraph LR\nA[方形] --&gt;B(圆角)\n    B --&gt; C&#123;条件a&#125;\n    C --&gt;|a&#x3D;1| D[结果1]\n    C --&gt;|a&#x3D;2| E[结果2]\n    F[横向流程图]\n&#96;&#96;&#96;\n\n2、竖向流程图源码格式：\n&#96;&#96;&#96;mermaid\ngraph TD\nA[方形] --&gt; B(圆角)\n    B --&gt; C&#123;条件a&#125;\n    C --&gt; |a&#x3D;1| D[结果1]\n    C --&gt; |a&#x3D;2| E[结果2]\n    F[竖向流程图]\n&#96;&#96;&#96;\n\n3、标准流程图源码格式：\n&#96;&#96;&#96;flow\nst&#x3D;&gt;start: 开始框\nop&#x3D;&gt;operation: 处理框\ncond&#x3D;&gt;condition: 判断框(是或否?)\nsub1&#x3D;&gt;subroutine: 子流程\nio&#x3D;&gt;inputoutput: 输入输出框\ne&#x3D;&gt;end: 结束框\nst-&gt;op-&gt;cond\ncond(yes)-&gt;io-&gt;e\ncond(no)-&gt;sub1(right)-&gt;op\n&#96;&#96;&#96;\n\n4、标准流程图源码格式（横向）：\n&#96;&#96;&#96;flow\nst&#x3D;&gt;start: 开始框\nop&#x3D;&gt;operation: 处理框\ncond&#x3D;&gt;condition: 判断框(是或否?)\nsub1&#x3D;&gt;subroutine: 子流程\nio&#x3D;&gt;inputoutput: 输入输出框\ne&#x3D;&gt;end: 结束框\nst(right)-&gt;op(right)-&gt;cond\ncond(yes)-&gt;io(bottom)-&gt;e\ncond(no)-&gt;sub1(right)-&gt;op\n&#96;&#96;&#96;\n\n5、UML时序图源码样例：\n&#96;&#96;&#96;sequence\n对象A-&gt;对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B--&gt;对象A: 我很好(响应)\n对象A-&gt;对象B: 你真的好吗？\n&#96;&#96;&#96;\n\n6、UML时序图源码复杂样例：\n&#96;&#96;&#96;sequence\nTitle: 标题：复杂使用\n对象A-&gt;对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B--&gt;对象A: 我很好(响应)\n对象B-&gt;小三: 你好吗\n小三--&gt;&gt;对象A: 对象B找我了\n对象A-&gt;对象B: 你真的好吗？\nNote over 小三,对象B: 我们是朋友\nparticipant C\nNote right of C: 没人陪我玩\n&#96;&#96;&#96;\n\n7、UML标准时序图样例：\n&#96;&#96;&#96;mermaid\n%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头\n  sequenceDiagram\n    participant 张三\n    participant 李四\n    张三-&gt;王五: 王五你好吗？\n    loop 健康检查\n        王五-&gt;王五: 与疾病战斗\n    end\n    Note right of 王五: 合理 食物 &lt;br&#x2F;&gt;看医生...\n    李四--&gt;&gt;张三: 很好!\n    王五-&gt;李四: 你怎么样?\n    李四--&gt;王五: 很好!\n&#96;&#96;&#96;\n\n8、甘特图样例：\n&#96;&#96;&#96;mermaid\n%% 语法示例\n        gantt\n        dateFormat  YYYY-MM-DD\n        title 软件开发甘特图\n        section 设计\n        需求                      :done,    des1, 2014-01-06,2014-01-08\n        原型                      :active,  des2, 2014-01-09, 3d\n        UI设计                     :         des3, after des2, 5d\n    未来任务                     :         des4, after des3, 5d\n        section 开发\n        学习准备理解需求                      :crit, done, 2014-01-06,24h\n        设计框架                             :crit, done, after des2, 2d\n        开发                                 :crit, active, 3d\n        未来任务                              :crit, 5d\n        耍                                   :2d\n        section 测试\n        功能测试                              :active, a1, after des3, 3d\n        压力测试                               :after a1  , 20h\n        测试报告                               : 48h\n&#96;&#96;&#96;\n\n效果图如下：\n\n","slug":"MarkDown的基本操作","date":"2023-04-01T06:20:07.000Z","categories_index":"","tags_index":"学习笔记","author_index":"Abysmiler"}]